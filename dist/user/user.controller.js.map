{"version":3,"sources":["../../src/user/user.controller.ts"],"sourcesContent":["import {\r\n  Body,\r\n  Controller,\r\n  DefaultValuePipe,\r\n  Delete,\r\n  Get,\r\n  Headers,\r\n  Param,\r\n  ParseIntPipe,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  Req,\r\n} from '@nestjs/common';\r\nimport { UserService } from './user.service';\r\nimport { CreateUserByAdminDTO } from './dto/create-user.dto';\r\nimport { UserRole } from './entity/user.entity';\r\nimport { UpdateUserDTO } from './dto/update-user.dto';\r\nimport { Roles } from '@/common/decorators/roles.decorator';\r\nimport { ApiBearerAuth, ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger';\r\nimport { Request } from 'express';\r\nimport { editDateUser } from './dto/edit-user-date.dto';\r\n\r\n@ApiTags('User')\r\n@ApiBearerAuth()\r\n@Controller()\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Roles(UserRole.ADMIN)\r\n  @Post('user')\r\n  async createUser(@Body() createUserDTO: CreateUserByAdminDTO) {\r\n    return await this.userService.createUser(createUserDTO);\r\n  }\r\n\r\n  @Roles(UserRole.ADMIN)\r\n  @Put('user/:phone')\r\n  async updateUser(\r\n    @Param('phone') phone: string,\r\n    @Body() updateUserDTO: UpdateUserDTO,\r\n  ) {\r\n    return await this.userService.updateUser(phone, updateUserDTO);\r\n  }\r\n\r\n  @Put('profile')\r\n  async editUser(\r\n    @Headers('authorization') authHeader: string,\r\n    @Body() editData: editDateUser,\r\n  ) {\r\n    return await this.userService.editDataUser(authHeader, editData);\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Get All Users' })\r\n  @ApiQuery({ name: 'page', required: false })\r\n  @ApiQuery({ name: 'limit', required: false })\r\n  @ApiQuery({ name: 'search', required: false })\r\n  @ApiQuery({ name: 'roles', required: false })\r\n  @ApiQuery({ name: 'all', required: false })\r\n  @ApiQuery({ name: 'sortBy', required: false })\r\n  @ApiQuery({ name: 'sortOrder', required: false })\r\n  @Roles(UserRole.ADMIN, UserRole.USER)\r\n  @Get('users')\r\n  async getUsers(\r\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\r\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\r\n    @Query('search') searchInput?: string,\r\n    @Query('roles') roles?: string,\r\n    @Query('all') all?: string,\r\n    @Query('sortBy') sort?: string,\r\n    @Query('sortOrder') sortOrder?: 'ASC' | 'DESC',\r\n  ) {\r\n    const result = await this.userService.getUsers(\r\n      page || 1,\r\n      limit || 10,\r\n      searchInput || '',\r\n      roles,\r\n      all || 'false',\r\n      sort || 'id',\r\n      sortOrder || 'DESC',\r\n    );\r\n    return {\r\n      status: 200,\r\n      ...result,\r\n      adminCount: await this.userService.getAdminCount(),\r\n      userCount: await this.userService.getUserCount(),\r\n    };\r\n  }\r\n\r\n  @Get('profile')\r\n  async getUserDataWithToken(\r\n    @Req() req: Request\r\n  ){\r\n    const userPhone = (req.user as any).result.phone;\r\n    return await this.userService.getUserDataWithToken(userPhone);\r\n  }\r\n\r\n  @Roles(UserRole.ADMIN)\r\n  @Get('user/:phone')\r\n  async getUserByPhone(\r\n    @Param('phone') phone: string\r\n  ){\r\n    return await this.userService.getUserByPhone(phone);\r\n  }\r\n\r\n  @Roles(UserRole.ADMIN)\r\n  @Delete('delete/:phone')\r\n  async deleteUsers(\r\n    @Param('phone') phone: string\r\n  ){\r\n    return await this.userService.deleteUsers(phone);\r\n  }\r\n}\r\n"],"names":["UserController","createUser","createUserDTO","userService","updateUser","phone","updateUserDTO","editUser","authHeader","editData","editDataUser","getUsers","page","limit","searchInput","roles","all","sort","sortOrder","result","status","adminCount","getAdminCount","userCount","getUserCount","getUserDataWithToken","req","userPhone","user","getUserByPhone","deleteUsers","constructor","ADMIN","summary","name","required","USER","DefaultValuePipe"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAbN;6BACqB;+BACS;4BACZ;+BACK;gCACR;yBACyC;yBACvC;iCACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKtB,IAAA,AAAMA,iBAAN,MAAMA;IAKLC,WAAW,AAAQC,aAAmC;;eAF5D,oBAAA;YAGE,OAAO,MAAM,MAAKC,WAAW,CAACF,UAAU,CAACC;QAC3C;;IAIME,WACJ,AAAgBC,KAAa,EAC7B,AAAQC,aAA4B;;eAJtC,oBAAA;YAME,OAAO,MAAM,MAAKH,WAAW,CAACC,UAAU,CAACC,OAAOC;QAClD;;IAGMC,SACJ,AAA0BC,UAAkB,EAC5C,AAAQC,QAAsB;;eAHhC,oBAAA;YAKE,OAAO,MAAM,MAAKN,WAAW,CAACO,YAAY,CAACF,YAAYC;QACzD;;IAYME,SACJ,AAAsDC,IAAY,EAClE,AAAwDC,KAAa,EACrE,AAAiBC,WAAoB,EACrC,AAAgBC,KAAc,EAC9B,AAAcC,GAAY,EAC1B,AAAiBC,IAAa,EAC9B,AAAoBC,SAA0B;;eAjBhD,oBAAA;YAmBE,MAAMC,SAAS,MAAM,MAAKhB,WAAW,CAACQ,QAAQ,CAC5CC,QAAQ,GACRC,SAAS,IACTC,eAAe,IACfC,OACAC,OAAO,SACPC,QAAQ,MACRC,aAAa;YAEf,OAAO;gBACLE,QAAQ;eACLD;gBACHE,YAAY,MAAM,MAAKlB,WAAW,CAACmB,aAAa;gBAChDC,WAAW,MAAM,MAAKpB,WAAW,CAACqB,YAAY;;QAElD;;IAGMC,qBACJ,AAAOC,GAAY;;eAFrB,oBAAA;YAIE,MAAMC,YAAY,AAACD,IAAIE,IAAI,CAAST,MAAM,CAACd,KAAK;YAChD,OAAO,MAAM,MAAKF,WAAW,CAACsB,oBAAoB,CAACE;QACrD;;IAIME,eACJ,AAAgBxB,KAAa;;eAH/B,oBAAA;YAKE,OAAO,MAAM,MAAKF,WAAW,CAAC0B,cAAc,CAACxB;QAC/C;;IAIMyB,YACJ,AAAgBzB,KAAa;;eAH/B,oBAAA;YAKE,OAAO,MAAM,MAAKF,WAAW,CAAC2B,WAAW,CAACzB;QAC5C;;IAnFA0B,YAAY,AAAiB5B,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AAoF1D;;oDAlFkB6B;;;;;;;;;;oDAMAA;;;;;;;;;;;;;;;;;;;;;;;;QAiBAC,SAAS;;;QACbC,MAAM;QAAQC,UAAU;;;QACxBD,MAAM;QAASC,UAAU;;;QACzBD,MAAM;QAAUC,UAAU;;;QAC1BD,MAAM;QAASC,UAAU;;;QACzBD,MAAM;QAAOC,UAAU;;;QACvBD,MAAM;QAAUC,UAAU;;;QAC1BD,MAAM;QAAaC,UAAU;;oDACzBH,4BAAgBI;;gDAGXC,wBAAgB,CAAC;iDAChBA,wBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAgCvBL;;;;;;;;;;oDAQAA"}