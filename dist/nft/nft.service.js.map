{"version":3,"sources":["../../src/nft/nft.service.ts"],"sourcesContent":["import { BadRequestException, ConflictException, ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NFT } from '@/nft/entity/nft.entity';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { MintNFTDto } from '@/nft/dto/MintNFT.dto';\r\nimport { User, UserRole } from '@/user/entity/user.entity';\r\nimport { IPFSService } from '@/services/IPFS.service';\r\n\r\n@Injectable()\r\nexport class NFTsService {\r\n  constructor(\r\n    @InjectRepository(NFT)\r\n    private readonly nftsRepository: Repository<NFT>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n\r\n    private readonly ipfsService: IPFSService\r\n  ) {}\r\n\r\n  async mintNFT(\r\n    mintNFTDto: MintNFTDto,\r\n    creatorPhone: string\r\n  ): Promise<ApiResponses<NFT>> {\r\n    const { name, description, imageURL, price } = mintNFTDto;\r\n  \r\n    const metadata = {\r\n      name,\r\n      description,\r\n      image: imageURL,\r\n      price,\r\n    };\r\n  \r\n    const creator = await this.userRepository.findOne({\r\n      where: { phone: creatorPhone },\r\n    });\r\n  \r\n    if (!creator) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n  \r\n    const metadataURL = await this.ipfsService.uploadMetadataToIPFS(metadata);\r\n  \r\n    const nft = {\r\n      name,\r\n      description,\r\n      imageURL,\r\n      metadataURL,\r\n      price,\r\n      createdAt: new Date(),\r\n      creator,\r\n      owner: creator,\r\n    };\r\n  \r\n    const newNFT = await this.nftsRepository.save(nft);\r\n  \r\n    return createResponse(201, newNFT);\r\n  }\r\n  \r\n  async burnNFT(\r\n    nftId: number,\r\n    currentOwnerPhone: string,\r\n    currentUserRoles: string[]\r\n  ): Promise<{ message: string }> {\r\n  \r\n    const nft = await this.nftsRepository.findOne({\r\n      where: { id: nftId },\r\n      relations: ['owner'],\r\n    });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT یافت نشد');\r\n    }\r\n  \r\n    const isOwner = nft.ownerPhone === currentOwnerPhone;\r\n    const isAdmin = currentUserRoles.includes(UserRole.ADMIN);\r\n  \r\n    if (!isOwner && !isAdmin) {\r\n      throw new ForbiddenException('فقط مالک می‌تواند این NFT را بسوزاند'); \r\n    }\r\n  \r\n    await this.nftsRepository.remove(nft);\r\n  \r\n    return { message: 'NFT با موفقیت سوزانده شد' }; \r\n  }\r\n  \r\n\r\n  async getNFTById(\r\n    nftId: number\r\n  ): Promise<ApiResponses<any>> {\r\n\r\n    const nft = await this.nftsRepository.findOne({\r\n      where:{ id:nftId },\r\n      relations:['collections']\r\n    })\r\n\r\n    if(!nft){\r\n      throw new NotFoundException('NFT یافت نشد')\r\n    }\r\n\r\n    const existingNFT = await this.nftsRepository\r\n      .createQueryBuilder('nfts')\r\n      .leftJoinAndSelect('nfts.creator','creator')\r\n      .leftJoinAndSelect('nfts.owner','owner')\r\n      .leftJoinAndSelect('nfts.collections','collection')\r\n      .select([\r\n        'nft.id',\r\n        'nft.name',\r\n        'nft.description',\r\n        'nft.imageURL',\r\n        'nft.matadataUrl',\r\n        'nft.price',\r\n        'nft.createdAt',\r\n        'nft.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'creator.firstName',\r\n        'creator.lastName'\r\n      ])\r\n      .addSelect([\r\n        'owner.firstName',\r\n        'owner.lastName'\r\n      ])\r\n      .addSelect([\r\n        'collection.id',\r\n        'collection.name',\r\n        'collection.description',\r\n      ])\r\n      .where('nfts.id = :nftId', {nftId})\r\n\r\n      return createResponse(200,existingNFT)\r\n  }\r\n\r\n}\r\n"],"names":["NFTsService","mintNFT","mintNFTDto","creatorPhone","name","description","imageURL","price","metadata","image","creator","userRepository","findOne","where","phone","NotFoundException","metadataURL","ipfsService","uploadMetadataToIPFS","nft","createdAt","Date","owner","newNFT","nftsRepository","save","createResponse","burnNFT","nftId","currentOwnerPhone","currentUserRoles","id","relations","isOwner","ownerPhone","isAdmin","includes","UserRole","ADMIN","ForbiddenException","remove","message","getNFTById","existingNFT","createQueryBuilder","leftJoinAndSelect","select","addSelect","constructor"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAV6F;yBACzE;0BACN;2BACP;8BACyB;4BAEd;6BACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGrB,IAAA,AAAMA,cAAN,MAAMA;IAULC,QACJC,UAAsB,EACtBC,YAAoB;;eAFtB,oBAAA;YAIE,MAAM,EAAEC,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,KAAK,EAAE,GAAGL;YAE/C,MAAMM,WAAW;gBACfJ;gBACAC;gBACAI,OAAOH;gBACPC;YACF;YAEA,MAAMG,UAAU,MAAM,MAAKC,cAAc,CAACC,OAAO,CAAC;gBAChDC,OAAO;oBAAEC,OAAOX;gBAAa;YAC/B;YAEA,IAAI,CAACO,SAAS;gBACZ,MAAM,IAAIK,yBAAiB,CAAC;YAC9B;YAEA,MAAMC,cAAc,MAAM,MAAKC,WAAW,CAACC,oBAAoB,CAACV;YAEhE,MAAMW,MAAM;gBACVf;gBACAC;gBACAC;gBACAU;gBACAT;gBACAa,WAAW,IAAIC;gBACfX;gBACAY,OAAOZ;YACT;YAEA,MAAMa,SAAS,MAAM,MAAKC,cAAc,CAACC,IAAI,CAACN;YAE9C,OAAOO,IAAAA,4BAAc,EAAC,KAAKH;QAC7B;;IAEMI,QACJC,KAAa,EACbC,iBAAyB,EACzBC,gBAA0B;;eAH5B,oBAAA;YAME,MAAMX,MAAM,MAAM,MAAKK,cAAc,CAACZ,OAAO,CAAC;gBAC5CC,OAAO;oBAAEkB,IAAIH;gBAAM;gBACnBI,WAAW;oBAAC;iBAAQ;YACtB;YAEA,IAAI,CAACb,KAAK;gBACR,MAAM,IAAIJ,yBAAiB,CAAC;YAC9B;YAEA,MAAMkB,UAAUd,IAAIe,UAAU,KAAKL;YACnC,MAAMM,UAAUL,iBAAiBM,QAAQ,CAACC,oBAAQ,CAACC,KAAK;YAExD,IAAI,CAACL,WAAW,CAACE,SAAS;gBACxB,MAAM,IAAII,0BAAkB,CAAC;YAC/B;YAEA,MAAM,MAAKf,cAAc,CAACgB,MAAM,CAACrB;YAEjC,OAAO;gBAAEsB,SAAS;YAA2B;QAC/C;;IAGMC,WACJd,KAAa;;eADf,oBAAA;YAIE,MAAMT,MAAM,MAAM,MAAKK,cAAc,CAACZ,OAAO,CAAC;gBAC5CC,OAAM;oBAAEkB,IAAGH;gBAAM;gBACjBI,WAAU;oBAAC;iBAAc;YAC3B;YAEA,IAAG,CAACb,KAAI;gBACN,MAAM,IAAIJ,yBAAiB,CAAC;YAC9B;YAEA,MAAM4B,cAAc,MAAM,MAAKnB,cAAc,CAC1CoB,kBAAkB,CAAC,QACnBC,iBAAiB,CAAC,gBAAe,WACjCA,iBAAiB,CAAC,cAAa,SAC/BA,iBAAiB,CAAC,oBAAmB,cACrCC,MAAM,CAAC;gBACN;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD,EACAC,SAAS,CAAC;gBACT;gBACA;aACD,EACAA,SAAS,CAAC;gBACT;gBACA;aACD,EACAA,SAAS,CAAC;gBACT;gBACA;gBACA;aACD,EACAlC,KAAK,CAAC,oBAAoB;gBAACe;YAAK;YAEjC,OAAOF,IAAAA,4BAAc,EAAC,KAAIiB;QAC9B;;IAxHAK,YACE,AACiBxB,cAA+B,EAChD,AACiBb,cAAgC,EAEjD,AAAiBM,WAAwB,CACzC;aALiBO,iBAAAA;aAEAb,iBAAAA;aAEAM,cAAAA;IAChB;AAmHL"}