{"version":3,"sources":["../../src/nft/nft.service.ts"],"sourcesContent":["import { BadRequestException, ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NFT } from '@/nft/entity/nft.entity';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { MintNFTDto } from '@/nft/dto/MintNFT.dto';\r\nimport { User, UserRole } from '@/user/entity/user.entity';\r\nimport { UpdateNFTDto } from '@/nft/dto/UpdateNFT.dto';\r\n\r\n@Injectable()\r\nexport class NFTsService {\r\n  constructor(\r\n    @InjectRepository(NFT)\r\n    private readonly nftsRepository: Repository<NFT>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>\r\n  ) {}\r\n\r\n  async mintNFT(\r\n    mintNFTDto: MintNFTDto,\r\n    creatorPhone: string\r\n  ): Promise<ApiResponses<NFT>>{\r\n\r\n    const {\r\n      name,\r\n      description,\r\n      imageURL,\r\n      metadataURL,\r\n      price\r\n    } = mintNFTDto\r\n\r\n    const creator = await this.userRepository.findOne({\r\n      where:{ phone:creatorPhone}\r\n    })\r\n\r\n    if(!creator){\r\n      throw new NotFoundException('کاربر یافت نشد')\r\n    }\r\n\r\n    const nft = {\r\n      name,\r\n      description,\r\n      imageURL,\r\n      metadataURL,\r\n      price,\r\n      createdAt: new Date(),\r\n      creator,\r\n      owner:creator\r\n    }\r\n\r\n    const newNFT = await this.nftsRepository.save(nft)\r\n\r\n    return createResponse(201,newNFT)\r\n  }\r\n\r\n  async updateNFT(\r\n    nftId: number,\r\n    updateNFTDto: UpdateNFTDto,\r\n    currentOwnerPhone: string,\r\n    currentUserRoles: string[]\r\n  ): Promise<ApiResponses<NFT>> {\r\n  \r\n    const nft = await this.nftsRepository.findOne({\r\n      where: { id: nftId },\r\n      relations: ['owner'],\r\n    });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT یافت نشد');\r\n    }\r\n\r\n    const isOwner = nft.ownerPhone === currentOwnerPhone;\r\n    const isAdmin = currentUserRoles.includes(UserRole.ADMIN);\r\n  \r\n    if (!isOwner && !isAdmin) {\r\n      throw new BadRequestException('شما مجاز به ویرایش نیستید'); \r\n    }\r\n  \r\n    if (updateNFTDto.name !== undefined){\r\n      nft.name = updateNFTDto.name\r\n    }\r\n\r\n    if (updateNFTDto.description !== undefined){\r\n      nft.description = updateNFTDto.description\r\n    }\r\n\r\n    if (updateNFTDto.price !== undefined){\r\n      nft.price = updateNFTDto.price  \r\n    }\r\n  \r\n    nft.updatedAt = new Date();\r\n\r\n    const updatedNFT = await this.nftsRepository.save(nft);\r\n  \r\n    return createResponse(200, updatedNFT);\r\n  }\r\n\r\n  async burnNFT(\r\n    nftId: number,\r\n    currentOwnerPhone: string,\r\n    currentUserRoles: string[]\r\n  ): Promise<{ message: string }> {\r\n  \r\n    const nft = await this.nftsRepository.findOne({\r\n      where: { id: nftId },\r\n      relations: ['owner'],\r\n    });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT یافت نشد');\r\n    }\r\n  \r\n    const isOwner = nft.ownerPhone === currentOwnerPhone;\r\n    const isAdmin = currentUserRoles.includes(UserRole.ADMIN);\r\n  \r\n    if (!isOwner && !isAdmin) {\r\n      throw new ForbiddenException('فقط مالک می‌تواند این NFT را بسوزاند'); \r\n    }\r\n  \r\n    await this.nftsRepository.remove(nft);\r\n  \r\n    return { message: 'NFT با موفقیت سوزانده شد' }; \r\n  }\r\n  \r\n\r\n  async getNFTById(\r\n    nftId: number\r\n  ): Promise<ApiResponses<any>> {\r\n\r\n    const nft = await this.nftsRepository.findOne({\r\n      where:{ id:nftId },\r\n      relations:['collections']\r\n    })\r\n\r\n    if(!nft){\r\n      throw new NotFoundException('NFT یافت نشد')\r\n    }\r\n\r\n    const existingNFT = await this.nftsRepository\r\n      .createQueryBuilder('nfts')\r\n      .leftJoinAndSelect('nfts.creator','creator')\r\n      .leftJoinAndSelect('nfts.owner','owner')\r\n      .leftJoinAndSelect('nfts.collections','collection')\r\n      .select([\r\n        'nft.id',\r\n        'nft.name',\r\n        'nft.description',\r\n        'nft.imageUrl',\r\n        'nft.matadataUrl',\r\n        'nft.price',\r\n        'nft.createdAt',\r\n        'nft.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'creator.firstName',\r\n        'creator.lastName'\r\n      ])\r\n      .addSelect([\r\n        'owner.firstName',\r\n        'owner.lastName'\r\n      ])\r\n      .addSelect([\r\n        'collection.id',\r\n        'collection.name',\r\n        'collection.description',\r\n      ])\r\n      .where('nfts.id = :nftId', {nftId})\r\n\r\n      return createResponse(200,existingNFT)\r\n  }\r\n\r\n}\r\n"],"names":["NFTsService","mintNFT","mintNFTDto","creatorPhone","name","description","imageURL","metadataURL","price","creator","userRepository","findOne","where","phone","NotFoundException","nft","createdAt","Date","owner","newNFT","nftsRepository","save","createResponse","updateNFT","nftId","updateNFTDto","currentOwnerPhone","currentUserRoles","id","relations","isOwner","ownerPhone","isAdmin","includes","UserRole","ADMIN","BadRequestException","undefined","updatedAt","updatedNFT","burnNFT","ForbiddenException","remove","message","getNFTById","existingNFT","createQueryBuilder","leftJoinAndSelect","select","addSelect","constructor"],"mappings":"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"}