{"version":3,"sources":["../../src/nft/nft.service.ts"],"sourcesContent":["import { BadRequestException, ConflictException, ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { NFT } from '@/nft/entity/nft.entity';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { MintNFTDto } from '@/nft/dto/MintNFT.dto';\r\nimport { User, UserRole } from '@/user/entity/user.entity';\r\nimport { IPFSService } from '@/services/IPFS.service';\r\n\r\n@Injectable()\r\nexport class NFTsService {\r\n  constructor(\r\n    @InjectRepository(NFT)\r\n    private readonly nftsRepository: Repository<NFT>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    private readonly ipfsService: IPFSService\r\n  ) {}\r\n\r\n  async mintNFT(\r\n    creatorPhone: string,\r\n    name: string,\r\n    price: number,\r\n    imageURL: string, \r\n    description?: string,\r\n  ): Promise<ApiResponses<NFT>> {\r\n    const creator = await this.userRepository.findOne({ where: { phone: creatorPhone } });\r\n  \r\n    if (!creator) {\r\n      throw new NotFoundException('User not found');\r\n    }\r\n  \r\n    const metadata = { name, description, image: imageURL, price };\r\n    const metadataURL = await this.ipfsService.uploadMetadataToIPFS(metadata);\r\n  \r\n    const nft = this.nftsRepository.create({\r\n      name,\r\n      description,\r\n      imageURL,\r\n      metadataURL,\r\n      price,\r\n      createdAt: new Date(),\r\n      creator,\r\n      owner: creator,\r\n    });\r\n  \r\n    const newNFT = await this.nftsRepository.save(nft);\r\n    return createResponse(201, newNFT);\r\n  }\r\n  \r\n  async burnNFT(nftId: number, currentOwnerPhone: string, currentUserRoles: string[]): Promise<{ message: string }> {\r\n    const nft = await this.nftsRepository.findOne({ where: { id: nftId }, relations: ['owner'] });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT not found');\r\n    }\r\n  \r\n    const isOwner = nft.owner.phone === currentOwnerPhone;\r\n    const isAdmin = currentUserRoles.includes(UserRole.ADMIN);\r\n  \r\n    if (!isOwner && !isAdmin) {\r\n      throw new ForbiddenException('Only the owner can burn this NFT'); \r\n    }\r\n  \r\n    await this.nftsRepository.remove(nft);\r\n    return { message: 'NFT successfully burned' }; \r\n  }\r\n  \r\n  async getNFTById(nftId: number): Promise<ApiResponses<any>> {\r\n    const nft = await this.nftsRepository.findOne({ where: { id: nftId }, relations: ['creator', 'owner', 'collections'] });\r\n    \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT not found');\r\n    }\r\n    \r\n    const existingNFT = await this.nftsRepository\r\n      .createQueryBuilder('nfts')\r\n      .leftJoinAndSelect('nfts.creator', 'creator')\r\n      .leftJoinAndSelect('nfts.owner', 'owner')\r\n      .leftJoinAndSelect('nfts.collections', 'collection')\r\n      .select([\r\n        'nft.id', 'nft.name', 'nft.description', 'nft.imageURL', 'nft.metadataURL', 'nft.price', 'nft.createdAt', 'nft.updatedAt',\r\n        'creator.firstName', 'creator.lastName', 'owner.firstName', 'owner.lastName',\r\n        'collection.id', 'collection.name', 'collection.description',\r\n      ])\r\n      .where('nfts.id = :nftId', { nftId })\r\n      .getOne();\r\n      \r\n    return createResponse(200, existingNFT);\r\n  }\r\n}\r\n"],"names":["NFTsService","mintNFT","creatorPhone","name","price","imageURL","description","creator","userRepository","findOne","where","phone","NotFoundException","metadata","image","metadataURL","ipfsService","uploadMetadataToIPFS","nft","nftsRepository","create","createdAt","Date","owner","newNFT","save","createResponse","burnNFT","nftId","currentOwnerPhone","currentUserRoles","id","relations","isOwner","isAdmin","includes","UserRole","ADMIN","ForbiddenException","remove","message","getNFTById","existingNFT","createQueryBuilder","leftJoinAndSelect","select","getOne","constructor"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAV6F;yBACzE;0BACN;2BACP;8BACyB;4BAEd;6BACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGrB,IAAA,AAAMA,cAAN,MAAMA;IASLC,QACJC,YAAoB,EACpBC,IAAY,EACZC,KAAa,EACbC,QAAgB,EAChBC,WAAoB;;eALtB,oBAAA;YAOE,MAAMC,UAAU,MAAM,MAAKC,cAAc,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEC,OAAOT;gBAAa;YAAE;YAEnF,IAAI,CAACK,SAAS;gBACZ,MAAM,IAAIK,yBAAiB,CAAC;YAC9B;YAEA,MAAMC,WAAW;gBAAEV;gBAAMG;gBAAaQ,OAAOT;gBAAUD;YAAM;YAC7D,MAAMW,cAAc,MAAM,MAAKC,WAAW,CAACC,oBAAoB,CAACJ;YAEhE,MAAMK,MAAM,MAAKC,cAAc,CAACC,MAAM,CAAC;gBACrCjB;gBACAG;gBACAD;gBACAU;gBACAX;gBACAiB,WAAW,IAAIC;gBACff;gBACAgB,OAAOhB;YACT;YAEA,MAAMiB,SAAS,MAAM,MAAKL,cAAc,CAACM,IAAI,CAACP;YAC9C,OAAOQ,IAAAA,4BAAc,EAAC,KAAKF;QAC7B;;IAEMG,QAAQC,KAAa,EAAEC,iBAAyB,EAAEC,gBAA0B;;eAAlF,oBAAA;YACE,MAAMZ,MAAM,MAAM,MAAKC,cAAc,CAACV,OAAO,CAAC;gBAAEC,OAAO;oBAAEqB,IAAIH;gBAAM;gBAAGI,WAAW;oBAAC;iBAAQ;YAAC;YAE3F,IAAI,CAACd,KAAK;gBACR,MAAM,IAAIN,yBAAiB,CAAC;YAC9B;YAEA,MAAMqB,UAAUf,IAAIK,KAAK,CAACZ,KAAK,KAAKkB;YACpC,MAAMK,UAAUJ,iBAAiBK,QAAQ,CAACC,oBAAQ,CAACC,KAAK;YAExD,IAAI,CAACJ,WAAW,CAACC,SAAS;gBACxB,MAAM,IAAII,0BAAkB,CAAC;YAC/B;YAEA,MAAM,MAAKnB,cAAc,CAACoB,MAAM,CAACrB;YACjC,OAAO;gBAAEsB,SAAS;YAA0B;QAC9C;;IAEMC,WAAWb,KAAa;;eAA9B,oBAAA;YACE,MAAMV,MAAM,MAAM,MAAKC,cAAc,CAACV,OAAO,CAAC;gBAAEC,OAAO;oBAAEqB,IAAIH;gBAAM;gBAAGI,WAAW;oBAAC;oBAAW;oBAAS;iBAAc;YAAC;YAErH,IAAI,CAACd,KAAK;gBACR,MAAM,IAAIN,yBAAiB,CAAC;YAC9B;YAEA,MAAM8B,cAAc,MAAM,MAAKvB,cAAc,CAC1CwB,kBAAkB,CAAC,QACnBC,iBAAiB,CAAC,gBAAgB,WAClCA,iBAAiB,CAAC,cAAc,SAChCA,iBAAiB,CAAC,oBAAoB,cACtCC,MAAM,CAAC;gBACN;gBAAU;gBAAY;gBAAmB;gBAAgB;gBAAmB;gBAAa;gBAAiB;gBAC1G;gBAAqB;gBAAoB;gBAAmB;gBAC5D;gBAAiB;gBAAmB;aACrC,EACAnC,KAAK,CAAC,oBAAoB;gBAAEkB;YAAM,GAClCkB,MAAM;YAET,OAAOpB,IAAAA,4BAAc,EAAC,KAAKgB;QAC7B;;IA9EAK,YACE,AACiB5B,cAA+B,EAChD,AACiBX,cAAgC,EACjD,AAAiBQ,WAAwB,CACzC;aAJiBG,iBAAAA;aAEAX,iBAAAA;aACAQ,cAAAA;IAChB;AAyEL"}