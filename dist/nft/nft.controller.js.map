{"version":3,"sources":["../../src/nft/nft.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Delete, Body, Param, Req, UseInterceptors, UploadedFile, HttpStatus, ParseFilePipeBuilder, UsePipes, ValidationPipe } from '@nestjs/common';\r\nimport { NFTsService } from '@/nft/nft.service';\r\nimport { MintNFTDataDto, MintNFTDto } from './dto/MintNFT.dto';\r\nimport { Request } from 'express';\r\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { IPFSService } from '@/services/IPFS.service';\r\n\r\n@ApiTags('NFT')\r\n@ApiBearerAuth()\r\n@Controller('nft')\r\nexport class NFTsController {\r\n  constructor(\r\n    private readonly nftsService: NFTsService,\r\n    private readonly ipfsService: IPFSService\r\n  ) {}\r\n\r\n  @Post('mint')\r\n  @ApiConsumes('multipart/form-data')\r\n  @ApiBody({ type: MintNFTDto })\r\n  @UseInterceptors(FileInterceptor('imageURL'))\r\n  @UsePipes(new ValidationPipe({ transform: true }))  \r\n  async mintNFT(\r\n    @UploadedFile(\r\n      new ParseFilePipeBuilder().build({\r\n        errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\r\n      }),\r\n    )\r\n    imageURL: Express.Multer.File,\r\n    @Body() mintNFTDataDto: MintNFTDataDto,\r\n    @Req() req: Request,\r\n  ) {\r\n    const creatorPhone = (req.user as any).result.phone;\r\n    const NFTImageURL = await this.ipfsService.uploadFileToIPFS(imageURL);\r\n  \r\n    return await this.nftsService.mintNFT(\r\n      creatorPhone,\r\n      mintNFTDataDto.name,\r\n      mintNFTDataDto.price,\r\n      NFTImageURL, \r\n      mintNFTDataDto.description,\r\n    );\r\n  }\r\n\r\n  @Delete('/:nftId')\r\n  async burnNFT(@Param('nftId') nftId: number, @Req() req: Request) {\r\n    const currentOwnerPhone = (req.user as any).result.phone;\r\n    const currentUserRoles = (req.user as any).result.role;\r\n    return await this.nftsService.burnNFT(nftId, currentOwnerPhone, currentUserRoles);\r\n  }\r\n\r\n  @Get('/:nftId')\r\n  async getNFTById(@Param('nftId') nftId: number) {\r\n    return this.nftsService.getNFTById(nftId);\r\n  }\r\n}\r\n"],"names":["NFTsController","mintNFT","imageURL","mintNFTDataDto","req","creatorPhone","user","result","phone","NFTImageURL","ipfsService","uploadFileToIPFS","nftsService","name","price","description","burnNFT","nftId","currentOwnerPhone","currentUserRoles","role","getNFTById","constructor","type","MintNFTDto","ValidationPipe","transform","ParseFilePipeBuilder","build","errorHttpStatusCode","HttpStatus","UNPROCESSABLE_ENTITY"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAX8I;4BAC/H;4BACe;yBACnB;yBACqC;iCAC7B;6BACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKrB,IAAA,AAAMA,iBAAN,MAAMA;IAWLC,QACJ,AAKAC,QAA6B,EAC7B,AAAQC,cAA8B,EACtC,AAAOC,GAAY;;eAbrB,oBAAA;YAeE,MAAMC,eAAe,AAACD,IAAIE,IAAI,CAASC,MAAM,CAACC,KAAK;YACnD,MAAMC,cAAc,MAAM,MAAKC,WAAW,CAACC,gBAAgB,CAACT;YAE5D,OAAO,MAAM,MAAKU,WAAW,CAACX,OAAO,CACnCI,cACAF,eAAeU,IAAI,EACnBV,eAAeW,KAAK,EACpBL,aACAN,eAAeY,WAAW;QAE9B;;IAGMC,QAAQ,AAAgBC,KAAa,EAAE,AAAOb,GAAY;;eADhE,oBAAA;YAEE,MAAMc,oBAAoB,AAACd,IAAIE,IAAI,CAASC,MAAM,CAACC,KAAK;YACxD,MAAMW,mBAAmB,AAACf,IAAIE,IAAI,CAASC,MAAM,CAACa,IAAI;YACtD,OAAO,MAAM,MAAKR,WAAW,CAACI,OAAO,CAACC,OAAOC,mBAAmBC;QAClE;;IAGME,WAAW,AAAgBJ,KAAa;;eAD9C,oBAAA;YAEE,OAAO,MAAKL,WAAW,CAACS,UAAU,CAACJ;QACrC;;IA1CAK,YACE,AAAiBV,WAAwB,EACzC,AAAiBF,WAAwB,CACzC;aAFiBE,cAAAA;aACAF,cAAAA;IAChB;AAwCL;;;;;QApCaa,MAAMC,sBAAU;;;8BAEbC,sBAAc,CAAC;QAAEC,WAAW;IAAK;+CAGvCC,4BAAoB,GAAGC;QACzBC,qBAAqBC,kBAAU,CAACC,oBAAoB;;;;;;yDAGtC,yCAAA,OAAO,wCAAP,OAAO"}