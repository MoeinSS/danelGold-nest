{"version":3,"sources":["../../src/nft/nft.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Put, Delete, Body, Param, Req, Query, DefaultValuePipe, ParseIntPipe, UseInterceptors, UploadedFile, BadRequestException, HttpStatus, ParseFilePipeBuilder } from '@nestjs/common';\r\nimport { NFTsService } from '@/nft/nft.service';\r\nimport { MintNFTDto } from './dto/MintNFT.dto';\r\nimport { Request } from 'express';\r\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { FileInterceptor } from '@nestjs/platform-express';\r\nimport { IPFSService } from '@/services/IPFS.service';\r\n\r\n@ApiTags('NFT')\r\n@ApiBearerAuth()\r\n@Controller('nft')\r\nexport class NFTsController {\r\n  constructor(\r\n    private readonly nftsService: NFTsService,\r\n    private readonly ipfsService: IPFSService\r\n  ) {}\r\n\r\n  @Post('mint')\r\n  @ApiConsumes('multipart/form-data')\r\n  @ApiBody({\r\n    type: MintNFTDto,\r\n  })\r\n  @UseInterceptors(FileInterceptor('imageURL'))\r\n  @ApiOperation({ summary: 'Mint a new NFT' })\r\n  @ApiResponse({\r\n    status: 201,\r\n    description: 'The NFT has been successfully minted.',\r\n  })\r\n  async mintNFT(\r\n    @UploadedFile(\r\n      new ParseFilePipeBuilder()\r\n        .addMaxSizeValidator({ maxSize: 5 * 1024 * 1024 }) // Adjust size as needed\r\n        .addFileTypeValidator({ fileType: 'image/jpeg,image/png,image/webp,image/svg+xml' })\r\n        .build({ errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY }),\r\n    )\r\n    file: Express.Multer.File,\r\n    @Body() mintNFTDto: MintNFTDto,\r\n    @Req() req: Request\r\n  ) {\r\n    const creatorPhone = (req.user as any).result.phone;\r\n\r\n    const imageURL = await this.ipfsService.uploadToIPFS(file.buffer);\r\n\r\n    // Create an updated MintNFTDto with the URL\r\n    const updatedMintNFTDto: MintNFTDto = {\r\n      ...mintNFTDto,\r\n      imageURL, \r\n    };\r\n\r\n    return await this.nftsService.mintNFT(updatedMintNFTDto, creatorPhone);\r\n  }\r\n\r\n  @Delete('/:nftId')\r\n  async burnNFT(\r\n    @Param('nftId', ParseIntPipe) nftId: number,\r\n    @Req() req: Request\r\n  ) {\r\n    const currentOwnerPhone = (req.user as any).result.phone;\r\n    const currentUserRoles = (req.user as any).result.role;\r\n    return await this.nftsService.burnNFT(\r\n      nftId,\r\n      currentOwnerPhone,\r\n      currentUserRoles\r\n    );\r\n  }\r\n\r\n  @Get('/:nftId')\r\n  async getNFTById(\r\n    @Param('nftId', ParseIntPipe) nftId: number\r\n  ) {\r\n    return this.nftsService.getNFTById(nftId);\r\n  }\r\n}\r\n"],"names":["NFTsController","mintNFT","file","mintNFTDto","req","creatorPhone","user","result","phone","imageURL","ipfsService","uploadToIPFS","buffer","updatedMintNFTDto","nftsService","burnNFT","nftId","currentOwnerPhone","currentUserRoles","role","getNFTById","constructor","type","MintNFTDto","summary","status","description","ParseFilePipeBuilder","addMaxSizeValidator","maxSize","addFileTypeValidator","fileType","build","errorHttpStatusCode","HttpStatus","UNPROCESSABLE_ENTITY"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXqL;4BACtK;4BACD;yBACH;yBACgE;iCACxD;6BACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKrB,IAAA,AAAMA,iBAAN,MAAMA;IAiBLC,QACJ,AAMAC,IAAyB,EACzB,AAAQC,UAAsB,EAC9B,AAAOC,GAAY;;eApBrB,oBAAA;YAsBE,MAAMC,eAAe,AAACD,IAAIE,IAAI,CAASC,MAAM,CAACC,KAAK;YAEnD,MAAMC,WAAW,MAAM,MAAKC,WAAW,CAACC,YAAY,CAACT,KAAKU,MAAM;YAEhE,4CAA4C;YAC5C,MAAMC,oBAAgC,wCACjCV;gBACHM;;YAGF,OAAO,MAAM,MAAKK,WAAW,CAACb,OAAO,CAACY,mBAAmBR;QAC3D;;IAGMU,QACJ,AAA8BC,KAAa,EAC3C,AAAOZ,GAAY;;eAHrB,oBAAA;YAKE,MAAMa,oBAAoB,AAACb,IAAIE,IAAI,CAASC,MAAM,CAACC,KAAK;YACxD,MAAMU,mBAAmB,AAACd,IAAIE,IAAI,CAASC,MAAM,CAACY,IAAI;YACtD,OAAO,MAAM,MAAKL,WAAW,CAACC,OAAO,CACnCC,OACAC,mBACAC;QAEJ;;IAGME,WACJ,AAA8BJ,KAAa;;eAF7C,oBAAA;YAIE,OAAO,MAAKF,WAAW,CAACM,UAAU,CAACJ;QACrC;;IA3DAK,YACE,AAAiBP,WAAwB,EACzC,AAAiBJ,WAAwB,CACzC;aAFiBI,cAAAA;aACAJ,cAAAA;IAChB;AAyDL;;;;;QApDIY,MAAMC,sBAAU;;;;QAGFC,SAAS;;;QAEvBC,QAAQ;QACRC,aAAa;;+CAIPC,4BAAoB,GACrBC;QAAsBC,SAAS,IAAI,OAAO;OAC1CC;QAAuBC,UAAU;OACjCC;QAAQC,qBAAqBC,kBAAU,CAACC,oBAAoB;;;;;;yDAEnD,yCAAA,OAAO,wCAAP,OAAO"}