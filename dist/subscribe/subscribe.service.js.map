{"version":3,"sources":["../../src/subscribe/subscribe.service.ts"],"sourcesContent":["import {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n  OnModuleDestroy,\r\n  OnModuleInit,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Subscribe } from './entity/subscribe.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { User } from '@/user/entity/user.entity';\r\nimport { SubscribeDto } from './dto/Subscription.dto';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { SmsService } from '@/services/sms.service';\r\nimport * as webPush from 'web-push';\r\nimport { CronJob } from 'cron';\r\nimport { configDotenv } from 'dotenv';\r\nimport { Auction } from '@/auction/entity/auction.entity';\r\n\r\nconfigDotenv();\r\n\r\n@Injectable()\r\nexport class SubscribeService implements OnModuleInit, OnModuleDestroy {\r\n  private job: CronJob;\r\n\r\n  constructor(\r\n    @InjectRepository(Subscribe)\r\n    private readonly subscribeRepository: Repository<Subscribe>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    @InjectRepository(Auction)\r\n    private readonly auctionRepository: Repository<Auction>,\r\n    private readonly smsService: SmsService,\r\n  ) {\r\n    webPush.setVapidDetails(\r\n      process.env.EMAIL_NOTIFICATION ?? '',\r\n      process.env.PUBLIC_KEY_NOTIFICATION ?? '',\r\n      process.env.PRIMARY_KEY_NOTIFICATION ?? '',\r\n    );\r\n  }\r\n\r\n  async subscribeUser(\r\n    userPhone: string,\r\n    subscribeDto: SubscribeDto,\r\n  ): Promise<ApiResponses<Subscribe>> {\r\n    const { subscription } = subscribeDto;\r\n    const existingUser = await this.userRepository.findOne({\r\n      where: { phone: userPhone },\r\n    });\r\n\r\n    if (!existingUser) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n\r\n    console.log(subscription);\r\n\r\n    const existingSubscription = await this.subscribeRepository.findOne({\r\n      where: { endpoint: subscription.endpoint },\r\n    });\r\n\r\n    console.log(subscription.endpoint);\r\n\r\n    if (existingSubscription) {\r\n      throw new BadRequestException('اشتراک این کاربر وجود دارد');\r\n    }\r\n\r\n    const newSubscription = this.subscribeRepository.create({\r\n      endpoint: subscription.endpoint,\r\n      auth: subscription.keys.auth,\r\n      p256dh: subscription.keys.p256dh,\r\n      userPhone: existingUser.phone,\r\n      isActive: true,\r\n      user: existingUser,\r\n    });\r\n\r\n    await this.subscribeRepository.save(newSubscription);\r\n    return createResponse(201, newSubscription, 'اعلان فعال شد');\r\n  }\r\n\r\n  async unsubscribeUser(\r\n    userPhone: string,\r\n  ): Promise<{ message: string; statusCode: number }> {\r\n    const existingUser = await this.userRepository.findOne({\r\n      where: { phone: userPhone },\r\n    });\r\n\r\n    if (!existingUser) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n\r\n    const userSubscription = await this.subscribeRepository.findOne({\r\n      where: { userPhone: userPhone },\r\n    });\r\n\r\n    if (!userSubscription || userSubscription.endpoint === '') {\r\n      throw new BadRequestException('ساب اسکرایپ یافت نشد');\r\n    }\r\n\r\n    await this.subscribeRepository.remove(userSubscription);\r\n\r\n    return { message: 'اشتراک با موفقیت حذف شد', statusCode: 200 };\r\n  }\r\n\r\n  async SendSMSCron(): Promise<void> {\r\n    const currentTimestamp = new Date();\r\n    const windowStart = new Date(currentTimestamp);\r\n    windowStart.setSeconds(currentTimestamp.getSeconds() - 30);\r\n    const windowEnd = new Date(currentTimestamp);\r\n    windowEnd.setSeconds(currentTimestamp.getSeconds() + 30);\r\n\r\n    const auctionPromise = await this.auctionRepository\r\n      .createQueryBuilder('acutions')\r\n      .where('auctions.startTime >= :windowStart', { windowStart })\r\n      .andWhere('auctions.startTime <= :windowEnd', { windowEnd })\r\n      .andWhere('auctions.isSms = :isSms', { isSms: true })\r\n      .getMany();\r\n\r\n    const usersPromise = await this.userRepository\r\n      .createQueryBuilder('user')\r\n      .select('user.phone')\r\n      .getMany();\r\n\r\n    const [auctions, users] = await Promise.all([\r\n      auctionPromise,\r\n      usersPromise,\r\n    ]);\r\n\r\n    if (auctions.length > 0 && users.length > 0) {\r\n      const userPhones: string[] = users.map((user: any) => user.phone);\r\n\r\n      for (const acution of auctions) {\r\n        const message = `${acution.title}`;\r\n\r\n        console.log('Sending SMS to:', userPhones.join(', '));\r\n        console.log('Message:', message);\r\n\r\n        await this.smsService.sendClassTimeSMS(userPhones, message);\r\n      }\r\n\r\n      console.log('SMS sent successfully');\r\n    }\r\n  }\r\n\r\n  async sendNotif(): Promise<void> {\r\n    const currentTimestamp = new Date();\r\n\r\n    const windowStart = new Date(currentTimestamp);\r\n    windowStart.setSeconds(currentTimestamp.getSeconds() - 30);\r\n\r\n    const windowEnd = new Date(currentTimestamp);\r\n    windowEnd.setSeconds(currentTimestamp.getSeconds() + 30);\r\n\r\n    const currentAuction = await this.auctionRepository\r\n      .createQueryBuilder('auctions')\r\n      .leftJoinAndSelect('auctions.nft', 'nft')\r\n      .addSelect(['nft.name', 'nft.imageURL'])\r\n      .where('auctions.start >= :windowStart', { windowStart })\r\n      .andWhere('auctions.start <= :windowEnd', { windowEnd })\r\n      .getOne();\r\n\r\n    if (!currentAuction) {\r\n      console.log('No class found at the current timestamp');\r\n      return;\r\n    }\r\n\r\n    const subscriptions = await this.subscribeRepository.find();\r\n\r\n    if (!subscriptions || subscriptions.length === 0) {\r\n      console.log('No subscriptions found');\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      title: currentAuction.title,\r\n      body: `${currentAuction.nft.name} در حال برگزاری است`,\r\n      icon: currentAuction.nft.imageURL,\r\n      badge: ``,\r\n    };\r\n\r\n    for (const subscription of subscriptions) {\r\n      await webPush.sendNotification(\r\n        {\r\n          endpoint: subscription.endpoint,\r\n          keys: {\r\n            auth: subscription.auth,\r\n            p256dh: subscription.p256dh,\r\n          },\r\n        },\r\n        JSON.stringify(payload),\r\n      );\r\n    }\r\n    console.log('Notification sent successfully');\r\n  }\r\n\r\n  async sendSMSCron(): Promise<void> {\r\n    await this.sendNotif();\r\n  }\r\n\r\n  onModuleInit() {\r\n    this.job = new CronJob('* * * * *', async () => {\r\n      await this.sendSMSCron();\r\n      console.log('cron job ran.');\r\n    });\r\n    this.job.start();\r\n  }\r\n\r\n  onModuleDestroy() {\r\n    if (this.job) {\r\n      this.job.stop();\r\n    }\r\n  }\r\n\r\n  async sendContent(\r\n    title: string,\r\n    content: string,\r\n  ): Promise<{ statusCode: number }> {\r\n    const payload = {\r\n      title: title,\r\n      body: content,\r\n      icon: '',\r\n      badge:\r\n        '',\r\n    };\r\n\r\n    console.log(`payload >>> ${JSON.stringify(payload)}\\n\\n`);\r\n\r\n    const subscriptions = await this.subscribeRepository.find();\r\n\r\n    if (!subscriptions || subscriptions.length === 0) {\r\n      console.log('No subscriptions found');\r\n      return { statusCode: 404 };\r\n    }\r\n\r\n    for (const subscription of subscriptions) {\r\n      try {\r\n        const notif = await webPush.sendNotification(\r\n          {\r\n            endpoint: subscription.endpoint,\r\n            keys: {\r\n              auth: subscription.auth,\r\n              p256dh: subscription.p256dh,\r\n            },\r\n          },\r\n          JSON.stringify(payload),\r\n        );\r\n\r\n        console.log(`notiffffff sent to: ${JSON.stringify(notif)}\\n\\n`);\r\n        console.log(\r\n          `Notification sent to: ${JSON.stringify(subscription)}\\n\\n`,\r\n        );\r\n      } catch (error) {\r\n        console.error(\r\n          `Failed to send notification to ${subscription.endpoint}:`,\r\n          error,\r\n        );\r\n      }\r\n    }\r\n\r\n    return { statusCode: 200 };\r\n  }\r\n}\r\n"],"names":["SubscribeService","configDotenv","subscribeUser","userPhone","subscribeDto","subscription","existingUser","userRepository","findOne","where","phone","NotFoundException","console","log","existingSubscription","subscribeRepository","endpoint","BadRequestException","newSubscription","create","auth","keys","p256dh","isActive","user","save","createResponse","unsubscribeUser","userSubscription","remove","message","statusCode","SendSMSCron","currentTimestamp","Date","windowStart","setSeconds","getSeconds","windowEnd","auctionPromise","auctionRepository","createQueryBuilder","andWhere","isSms","getMany","usersPromise","select","auctions","users","Promise","all","length","userPhones","map","acution","title","join","smsService","sendClassTimeSMS","sendNotif","currentAuction","leftJoinAndSelect","addSelect","getOne","subscriptions","find","payload","body","nft","name","icon","imageURL","badge","webPush","sendNotification","JSON","stringify","sendSMSCron","onModuleInit","job","CronJob","start","onModuleDestroy","stop","sendContent","content","notif","error","constructor","process","setVapidDetails","env","EMAIL_NOTIFICATION","PUBLIC_KEY_NOTIFICATION","PRIMARY_KEY_NOTIFICATION"],"mappings":"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"}