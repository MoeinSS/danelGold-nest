{"version":3,"sources":["../../src/forum/forum.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ForumTopic } from './entity/forum-topic.entity';\r\nimport { ForumPost } from './entity/forum-post.entity';\r\n\r\n@Injectable()\r\nexport class ForumService {\r\n  constructor(\r\n    @InjectRepository(ForumTopic)\r\n    private topicsRepository: Repository<ForumTopic>,\r\n    @InjectRepository(ForumPost)\r\n    private postsRepository: Repository<ForumPost>,\r\n  ) {}\r\n\r\n  // Forum Topic Services\r\n  createTopic(topicData: Partial<ForumTopic>): Promise<ForumTopic> {\r\n    const topic = this.topicsRepository.create(topicData);\r\n    return this.topicsRepository.save(topic);\r\n  }\r\n\r\n  findAllTopics(): Promise<ForumTopic[]> {\r\n    return this.topicsRepository.find({ relations: ['user', 'posts'] });\r\n  }\r\n\r\n  findOneTopic(id: number): Promise<ForumTopic> {\r\n    return this.topicsRepository.findOne({ where: { id }, relations: ['user', 'posts'] });\r\n  }\r\n\r\n  updateTopic(id: number, updateData: Partial<ForumTopic>): Promise<any> {\r\n    return this.topicsRepository.update(id, updateData);\r\n  }\r\n\r\n  removeTopic(id: number): Promise<any> {\r\n    return this.topicsRepository.delete(id);\r\n  }\r\n\r\n  // Forum Post Services\r\n  createPost(postData: Partial<ForumPost>): Promise<ForumPost> {\r\n    const post = this.postsRepository.create(postData);\r\n    return this.postsRepository.save(post);\r\n  }\r\n\r\n  findAllPosts(topicId: number): Promise<ForumPost[]> {\r\n    return this.postsRepository.find({ where: { topic: { id: topicId } }, relations: ['user', 'topic'] });\r\n  }\r\n\r\n  findOnePost(id: number): Promise<ForumPost> {\r\n    return this.postsRepository.findOne({ where: { id }, relations: ['user', 'topic'] });\r\n  }\r\n\r\n  updatePost(id: number, updateData: Partial<ForumPost>): Promise<any> {\r\n    return this.postsRepository.update(id, updateData);\r\n  }\r\n\r\n  removePost(id: number): Promise<any> {\r\n    return this.postsRepository.delete(id);\r\n  }\r\n}\r\n"],"names":["ForumService","createTopic","topicData","topic","topicsRepository","create","save","findAllTopics","find","relations","findOneTopic","id","findOne","where","updateTopic","updateData","update","removeTopic","delete","createPost","postData","post","postsRepository","findAllPosts","topicId","findOnePost","updatePost","removePost","constructor"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPc;yBACM;0BACN;kCACA;iCACD;;;;;;;;;;;;;;;AAGnB,IAAA,AAAMA,eAAN,MAAMA;IAQX,uBAAuB;IACvBC,YAAYC,SAA8B,EAAuB;QAC/D,MAAMC,QAAQ,IAAI,CAACC,gBAAgB,CAACC,MAAM,CAACH;QAC3C,OAAO,IAAI,CAACE,gBAAgB,CAACE,IAAI,CAACH;IACpC;IAEAI,gBAAuC;QACrC,OAAO,IAAI,CAACH,gBAAgB,CAACI,IAAI,CAAC;YAAEC,WAAW;gBAAC;gBAAQ;aAAQ;QAAC;IACnE;IAEAC,aAAaC,EAAU,EAAuB;QAC5C,OAAO,IAAI,CAACP,gBAAgB,CAACQ,OAAO,CAAC;YAAEC,OAAO;gBAAEF;YAAG;YAAGF,WAAW;gBAAC;gBAAQ;aAAQ;QAAC;IACrF;IAEAK,YAAYH,EAAU,EAAEI,UAA+B,EAAgB;QACrE,OAAO,IAAI,CAACX,gBAAgB,CAACY,MAAM,CAACL,IAAII;IAC1C;IAEAE,YAAYN,EAAU,EAAgB;QACpC,OAAO,IAAI,CAACP,gBAAgB,CAACc,MAAM,CAACP;IACtC;IAEA,sBAAsB;IACtBQ,WAAWC,QAA4B,EAAsB;QAC3D,MAAMC,OAAO,IAAI,CAACC,eAAe,CAACjB,MAAM,CAACe;QACzC,OAAO,IAAI,CAACE,eAAe,CAAChB,IAAI,CAACe;IACnC;IAEAE,aAAaC,OAAe,EAAwB;QAClD,OAAO,IAAI,CAACF,eAAe,CAACd,IAAI,CAAC;YAAEK,OAAO;gBAAEV,OAAO;oBAAEQ,IAAIa;gBAAQ;YAAE;YAAGf,WAAW;gBAAC;gBAAQ;aAAQ;QAAC;IACrG;IAEAgB,YAAYd,EAAU,EAAsB;QAC1C,OAAO,IAAI,CAACW,eAAe,CAACV,OAAO,CAAC;YAAEC,OAAO;gBAAEF;YAAG;YAAGF,WAAW;gBAAC;gBAAQ;aAAQ;QAAC;IACpF;IAEAiB,WAAWf,EAAU,EAAEI,UAA8B,EAAgB;QACnE,OAAO,IAAI,CAACO,eAAe,CAACN,MAAM,CAACL,IAAII;IACzC;IAEAY,WAAWhB,EAAU,EAAgB;QACnC,OAAO,IAAI,CAACW,eAAe,CAACJ,MAAM,CAACP;IACrC;IAjDAiB,YACE,AACQxB,gBAAwC,EAChD,AACQkB,eAAsC,CAC9C;aAHQlB,mBAAAA;aAEAkB,kBAAAA;IACP;AA6CL"}