{"version":3,"sources":["../../../src/auth/token/token.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Token } from './entity/token.entity';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { User } from '@/user/entity/user.entity';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\n\r\n@Injectable()\r\nexport class TokenService {\r\n  private readonly maxSessionsPerUser: number;\r\n\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    @InjectRepository(Token)\r\n    private readonly tokenRepository: Repository<Token>,\r\n    private readonly jwtService: JwtService,\r\n  ) {\r\n    this.maxSessionsPerUser = 1;\r\n  }\r\n\r\n  async createToken(user: User): Promise<string> {\r\n    const isUser = user.role.includes('user'); \r\n    const isAdmin = user.role.includes('admin'); \r\n\r\n    if (isUser) {\r\n      const activeTokenCount = await this.tokenRepository\r\n        .createQueryBuilder('token')\r\n        .where('token.userPhone = :userPhone', { userPhone: user.phone })\r\n        .getCount();\r\n\r\n      if (activeTokenCount >= this.maxSessionsPerUser) {\r\n        await this.tokenRepository\r\n          .createQueryBuilder('token')\r\n          .delete()\r\n          .where('userPhone = :userPhone', { userPhone: user.phone })\r\n          .execute();\r\n      }\r\n    }\r\n\r\n    const payload = {\r\n      sub: user.phone,\r\n      phone: user.phone,\r\n      roles: user.role,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      imageUrl: user.imageUrl,\r\n      createdAt: user.createdAt,\r\n      lastLogin: user.lastLogin,\r\n    };\r\n\r\n    const token = this.jwtService.sign(payload);\r\n\r\n    const tokenEntity = new Token();\r\n    tokenEntity.token = token;\r\n    tokenEntity.createdAt = new Date();\r\n    tokenEntity.user = user;\r\n\r\n    await this.tokenRepository.save(tokenEntity);\r\n\r\n    return token;\r\n  }\r\n\r\n  async deleteToken(token: string): Promise<void> {\r\n    await this.tokenRepository.delete({ token });\r\n  }\r\n\r\n  async validateToken(token: string): Promise<boolean> {\r\n    const tokenEntity = await this.tokenRepository.findOne({\r\n      where: { token },\r\n    });\r\n    return !!tokenEntity;\r\n  }\r\n\r\n  async getMaxSessionsPerUser(): Promise<number> {\r\n    return this.maxSessionsPerUser;\r\n  }\r\n\r\n  async getTokensByPhone(phone: string): Promise<ApiResponses<Token[]>> {\r\n    const user = await this.userRepository.findOneBy({\r\n      phone: phone,\r\n    });\r\n\r\n    if (!user) {\r\n      throw new NotFoundException('کاربر پیدا نشد!');\r\n    }\r\n    const tokens = await this.tokenRepository.find();\r\n\r\n    return createResponse(200, tokens);\r\n  }\r\n}\r\n"],"names":["TokenService","createToken","user","isUser","role","includes","isAdmin","activeTokenCount","tokenRepository","createQueryBuilder","where","userPhone","phone","getCount","maxSessionsPerUser","delete","execute","payload","sub","roles","firstName","lastName","imageUrl","createdAt","lastLogin","token","jwtService","sign","tokenEntity","Token","Date","save","deleteToken","validateToken","findOne","getMaxSessionsPerUser","getTokensByPhone","userRepository","findOneBy","NotFoundException","tokens","find","createResponse","constructor"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBATN;yBAC0B;0BACN;6BACL;qBACK;4BACN;8BACwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGtC,IAAA,AAAMA,eAAN,MAAMA;IAaLC,YAAYC,IAAU;;eAA5B,oBAAA;YACE,MAAMC,SAASD,KAAKE,IAAI,CAACC,QAAQ,CAAC;YAClC,MAAMC,UAAUJ,KAAKE,IAAI,CAACC,QAAQ,CAAC;YAEnC,IAAIF,QAAQ;gBACV,MAAMI,mBAAmB,MAAM,MAAKC,eAAe,CAChDC,kBAAkB,CAAC,SACnBC,KAAK,CAAC,gCAAgC;oBAAEC,WAAWT,KAAKU,KAAK;gBAAC,GAC9DC,QAAQ;gBAEX,IAAIN,oBAAoB,MAAKO,kBAAkB,EAAE;oBAC/C,MAAM,MAAKN,eAAe,CACvBC,kBAAkB,CAAC,SACnBM,MAAM,GACNL,KAAK,CAAC,0BAA0B;wBAAEC,WAAWT,KAAKU,KAAK;oBAAC,GACxDI,OAAO;gBACZ;YACF;YAEA,MAAMC,UAAU;gBACdC,KAAKhB,KAAKU,KAAK;gBACfA,OAAOV,KAAKU,KAAK;gBACjBO,OAAOjB,KAAKE,IAAI;gBAChBgB,WAAWlB,KAAKkB,SAAS;gBACzBC,UAAUnB,KAAKmB,QAAQ;gBACvBC,UAAUpB,KAAKoB,QAAQ;gBACvBC,WAAWrB,KAAKqB,SAAS;gBACzBC,WAAWtB,KAAKsB,SAAS;YAC3B;YAEA,MAAMC,QAAQ,MAAKC,UAAU,CAACC,IAAI,CAACV;YAEnC,MAAMW,cAAc,IAAIC,kBAAK;YAC7BD,YAAYH,KAAK,GAAGA;YACpBG,YAAYL,SAAS,GAAG,IAAIO;YAC5BF,YAAY1B,IAAI,GAAGA;YAEnB,MAAM,MAAKM,eAAe,CAACuB,IAAI,CAACH;YAEhC,OAAOH;QACT;;IAEMO,YAAYP,KAAa;;eAA/B,oBAAA;YACE,MAAM,MAAKjB,eAAe,CAACO,MAAM,CAAC;gBAAEU;YAAM;QAC5C;;IAEMQ,cAAcR,KAAa;;eAAjC,oBAAA;YACE,MAAMG,cAAc,MAAM,MAAKpB,eAAe,CAAC0B,OAAO,CAAC;gBACrDxB,OAAO;oBAAEe;gBAAM;YACjB;YACA,OAAO,CAAC,CAACG;QACX;;IAEMO;;eAAN,oBAAA;YACE,OAAO,MAAKrB,kBAAkB;QAChC;;IAEMsB,iBAAiBxB,KAAa;;eAApC,oBAAA;YACE,MAAMV,OAAO,MAAM,MAAKmC,cAAc,CAACC,SAAS,CAAC;gBAC/C1B,OAAOA;YACT;YAEA,IAAI,CAACV,MAAM;gBACT,MAAM,IAAIqC,yBAAiB,CAAC;YAC9B;YACA,MAAMC,SAAS,MAAM,MAAKhC,eAAe,CAACiC,IAAI;YAE9C,OAAOC,IAAAA,4BAAc,EAAC,KAAKF;QAC7B;;IA9EAG,YACE,AACiBN,cAAgC,EACjD,AACiB7B,eAAkC,EACnD,AAAiBkB,UAAsB,CACvC;aAJiBW,iBAAAA;aAEA7B,kBAAAA;aACAkB,aAAAA;QAEjB,IAAI,CAACZ,kBAAkB,GAAG;IAC5B;AAuEF"}