{"version":3,"sources":["../../src/auth/auth.service.ts"],"sourcesContent":["import { UserDetailService } from '@/user-detail/userDetail.service';\r\nimport {\r\n  Injectable,\r\n  NotFoundException,\r\n  HttpStatus,\r\n  NotAcceptableException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { OtpService } from './otp/otp.service';\r\nimport { SignupDto } from './dto/signup-dto';\r\nimport { PhoneDto } from './dto/login-with-otp.dto';\r\nimport { LoginDto } from './dto/login-with-password.dto';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ResetPasswordDto } from './dto/reset-password.dto';\r\nimport { Request } from 'express';\r\nimport { TokenService } from './token/token.service';\r\nimport { User } from '@/user/entity/user.entity';\r\nimport { UserService } from '@/user/user.service';\r\nimport { UserDetail } from '@/user-detail/entity/userDetail.entity';\r\nimport { \r\n  getBrowserVersion, \r\n  getUserBrowser, \r\n  getUserIP, \r\n  getUserOS, \r\n  getVersionPlatform \r\n} from '@/common/utils/user-agent.util';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n    private readonly userService: UserService,\r\n    private readonly otpService: OtpService,\r\n    @InjectRepository(UserDetail)\r\n    private readonly userDetailRepository: Repository<UserDetail>,\r\n    private readonly userDetailService: UserDetailService,\r\n    private readonly tokenService: TokenService,\r\n  ) {}\r\n\r\n  async checkUser(\r\n    phoneDto: PhoneDto,\r\n  ): Promise<ApiResponses<{ registered: boolean; login: boolean }>> {\r\n    const { phone } = phoneDto;\r\n\r\n    const user = await this.userRepository.findOneBy({ phone });\r\n    if (!user) {\r\n      const data = { registered: false, login: false };\r\n      return createResponse(HttpStatus.OK, data);\r\n    } else {\r\n      return createResponse(HttpStatus.OK, { registered: true, login: false });\r\n    }\r\n  }\r\n\r\n  async signUpUsers(signupDto: SignupDto, userAgent: any, req: Request) {\r\n    const { phone, firstName, lastName, password, email } = signupDto;\r\n\r\n    const existingUser = await this.userRepository.findOneBy({ phone });\r\n\r\n    if (existingUser) {\r\n      throw new BadRequestException('کاربر از قبل وجود دارد');\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const data = {\r\n      name: firstName,\r\n      family: lastName,\r\n      userName: phone,\r\n      password,\r\n      email\r\n    };\r\n\r\n\r\n    const newUser = await this.userService.singupUser({\r\n      firstName,\r\n      lastName,\r\n      phone,\r\n      password: hashedPassword,\r\n      email,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    const userDetail = this.userDetailRepository.create({\r\n      user: newUser,\r\n      ...userAgent,\r\n    });\r\n\r\n    await this.userDetailRepository.save(userDetail);\r\n\r\n    const token = await this.tokenService.createToken(newUser);\r\n\r\n    return createResponse(201, {\r\n      message: 'ثبت نام با موفقیت انجام شد',\r\n      token,\r\n      username: newUser.phone,\r\n      register: true,\r\n    });\r\n  }\r\n\r\n  async loginWithOTP(phoneDto: PhoneDto): Promise<ApiResponses<any>> {\r\n    const { phone } = phoneDto;\r\n    const otp = await this.otpService.sendOTP(phone);\r\n\r\n    return createResponse(200);\r\n  }\r\n\r\n  async verifyWithOTP(verifyOtpDto: VerifyOtpDto, req: Request) {\r\n    const { phone, otp } = verifyOtpDto;\r\n    const isValidOTP = await this.otpService.verifyOTP(phone, otp);\r\n\r\n    if (!isValidOTP) {\r\n      throw new NotAcceptableException('رمز یکبار مصرف اشتباه است');\r\n    }\r\n\r\n    const user = await this.userRepository.findOneBy({ phone });\r\n\r\n    if (!user) {\r\n      return createResponse(\r\n        201,\r\n        { register: false, otp: true },\r\n        'کاربر یافت نشد، اما رمز یکبار مصرف صحیح است',\r\n      );\r\n    }\r\n\r\n    user.lastLogin = new Date();\r\n\r\n    const updateUserDTO = {\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      phone: user.phone,\r\n      roles: user.role,\r\n      imageUrl: user.imageUrl,\r\n      lastLogin: user.lastLogin,\r\n    };\r\n    await this.userService.updateUser(user.phone, updateUserDTO);\r\n\r\n    const userAgentHeader = req.headers['user-agent'];\r\n\r\n    const userAgent = {\r\n      platform: await getUserOS(req),\r\n      browser: await getUserBrowser(req),\r\n      versionBrowser: await getBrowserVersion(req),\r\n      versionPlatform: await getVersionPlatform(req),\r\n      ip: await getUserIP(req),\r\n    };\r\n\r\n    await this.userDetailService.createUserDetail(user.phone, userAgent);\r\n\r\n    const token = await this.tokenService.createToken(user);\r\n    return createResponse(200, {\r\n      token,\r\n      username: user.phone,\r\n      rolse: user.role,\r\n    });\r\n  }\r\n\r\n  async loginUserWithPassword(\r\n    loginDto: LoginDto,\r\n    req: Request,\r\n  ): Promise<ApiResponses<{ token: string; username: string }>> {\r\n    const { phone, password } = loginDto;\r\n    const user = await this.userRepository.findOneBy({ phone });\r\n\r\n    if (!user) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!passwordMatch) {\r\n      throw new NotAcceptableException('رمز عبور اشتباه است');\r\n    }\r\n\r\n    user.lastLogin = new Date();\r\n    const updateUserDTO = {\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      phone: user.phone,\r\n      roles: user.role,\r\n      imageUrl: user.imageUrl,\r\n      lastLogin: user.lastLogin,\r\n    };\r\n    await this.userService.updateUser(user.phone, updateUserDTO);\r\n\r\n    const userAgent = {\r\n      platform: await getUserOS(req),\r\n      browser: await getUserBrowser(req),\r\n      versionBrowser: await getBrowserVersion(req),\r\n      versionPlatform: await getVersionPlatform(req),\r\n      ip: await getUserIP(req),\r\n    };\r\n\r\n    await this.userDetailService.createUserDetail(user.phone, userAgent);\r\n\r\n    const token = await this.tokenService.createToken(user);\r\n    return createResponse(200, {\r\n      token,\r\n      username: user.phone,\r\n      rolse: user.role,\r\n    });\r\n  }\r\n\r\n  async forgetPasswordWithOTP(phone: string) {\r\n    const existingUser = await this.userRepository.findOneBy({ phone });\r\n    if (!existingUser) {\r\n      throw new NotFoundException('کاربری یافت نشد');\r\n    }\r\n    await this.otpService.sendOTP(phone);\r\n    return createResponse(\r\n      200,\r\n      { registred: true, login: false },\r\n      'رمز یکبار مصرف ارسال شد',\r\n    );\r\n  }\r\n\r\n  async resetPasswordWithOTP(\r\n    resetPasswordDto: ResetPasswordDto,\r\n  ): Promise<ApiResponses<{ login: boolean }>> {\r\n    const { phone, password, otp } = resetPasswordDto;\r\n\r\n    const isValidOTP = await this.otpService.verifyOTP(phone, otp);\r\n\r\n    if (!isValidOTP) {\r\n      throw new NotAcceptableException('رمز یکبار مصرف اشتباه است');\r\n    }\r\n\r\n    const existingUser = await this.userRepository.findOneBy({ phone });\r\n\r\n    if (!existingUser) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    existingUser.password = hashedPassword;\r\n\r\n    await this.userRepository.save(existingUser);\r\n    return createResponse(\r\n      200,\r\n      { login: false },\r\n      'رمز عبور با موفقیت تغییر یافت',\r\n    );\r\n  }\r\n}\r\n"],"names":["AuthService","checkUser","phoneDto","phone","user","userRepository","findOneBy","data","registered","login","createResponse","HttpStatus","OK","signUpUsers","signupDto","userAgent","req","firstName","lastName","password","email","existingUser","BadRequestException","hashedPassword","bcrypt","hash","name","family","userName","newUser","userService","singupUser","createdAt","Date","userDetail","userDetailRepository","create","save","token","tokenService","createToken","message","username","register","loginWithOTP","otp","otpService","sendOTP","verifyWithOTP","verifyOtpDto","isValidOTP","verifyOTP","NotAcceptableException","lastLogin","updateUserDTO","roles","role","imageUrl","updateUser","userAgentHeader","headers","platform","getUserOS","browser","getUserBrowser","versionBrowser","getBrowserVersion","versionPlatform","getVersionPlatform","ip","getUserIP","userDetailService","createUserDetail","rolse","loginUserWithPassword","loginDto","NotFoundException","passwordMatch","compare","forgetPasswordWithOTP","registred","resetPasswordWithOTP","resetPasswordDto","constructor"],"mappings":"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"}