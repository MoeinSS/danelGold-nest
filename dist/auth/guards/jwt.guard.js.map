{"version":3,"sources":["../../../src/auth/guards/jwt.guard.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  ExecutionContext,\r\n  UnauthorizedException,\r\n  ConflictException,\r\n} from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { IS_PUBLIC_KEY } from '@/common/decorators/public.decorator';\r\nimport { Observable } from 'rxjs';\r\nimport { TokenService } from '@/auth/token/token.service';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  constructor(\r\n    private reflector: Reflector,\r\n    private tokenService: TokenService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (isPublic) {\r\n      return true;\r\n    }\r\n\r\n    const request = context.switchToHttp().getRequest();\r\n    const authHeader = request.headers.authorization;\r\n    \r\n    if (!authHeader) {\r\n      throw new UnauthorizedException('Authorization header is missing');\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1];\r\n\r\n    if (!token) {\r\n      throw new UnauthorizedException('Token is missing');\r\n    }\r\n\r\n    const isValid = await this.tokenService.validateToken(token);\r\n    if (!isValid) {\r\n      throw new ConflictException('Invalid token');\r\n    }\r\n\r\n    // Convert Observable to Promise and resolve it to boolean\r\n    const superCanActivate = super.canActivate(context);\r\n    if (superCanActivate instanceof Observable) {\r\n      return superCanActivate.toPromise().then((result) => !!result);\r\n    }\r\n    return superCanActivate as boolean;\r\n  }\r\n}\r\n"],"names":["JwtAuthGuard","AuthGuard","canActivate","context","isPublic","reflector","getAllAndOverride","IS_PUBLIC_KEY","getHandler","getClass","request","switchToHttp","getRequest","authHeader","headers","authorization","UnauthorizedException","token","split","isValid","tokenService","validateToken","ConflictException","superCanActivate","Observable","toPromise","then","result","constructor"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBARN;sBACmB;0BACA;iCACI;sBACH;8BACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGtB,IAAA,AAAMA,eAAN,MAAMA,qBAAqBC,IAAAA,mBAAS,EAAC;IAQpCC,YAAYC,OAAyB;;eAA3C,oBAAA;YACE,MAAMC,WAAW,MAAKC,SAAS,CAACC,iBAAiB,CAAUC,8BAAa,EAAE;gBACxEJ,QAAQK,UAAU;gBAClBL,QAAQM,QAAQ;aACjB;YACD,IAAIL,UAAU;gBACZ,OAAO;YACT;YAEA,MAAMM,UAAUP,QAAQQ,YAAY,GAAGC,UAAU;YACjD,MAAMC,aAAaH,QAAQI,OAAO,CAACC,aAAa;YAEhD,IAAI,CAACF,YAAY;gBACf,MAAM,IAAIG,6BAAqB,CAAC;YAClC;YAEA,MAAMC,QAAQJ,WAAWK,KAAK,CAAC,IAAI,CAAC,EAAE;YAEtC,IAAI,CAACD,OAAO;gBACV,MAAM,IAAID,6BAAqB,CAAC;YAClC;YAEA,MAAMG,UAAU,MAAM,MAAKC,YAAY,CAACC,aAAa,CAACJ;YACtD,IAAI,CAACE,SAAS;gBACZ,MAAM,IAAIG,yBAAiB,CAAC;YAC9B;YAEA,0DAA0D;YAC1D,MAAMC,mBAAmB,6BAAA,YAAkBpB;YAC3C,IAAIoB,4BAA4BC,gBAAU,EAAE;gBAC1C,OAAOD,iBAAiBE,SAAS,GAAGC,IAAI,CAAC,CAACC,SAAW,CAAC,CAACA;YACzD;YACA,OAAOJ;QACT;;IAxCAK,YACE,AAAQvB,SAAoB,EAC5B,AAAQe,YAA0B,CAClC;QACA,KAAK,SAHGf,YAAAA,gBACAe,eAAAA;IAGV;AAoCF"}