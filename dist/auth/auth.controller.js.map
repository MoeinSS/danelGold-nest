{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import { SignupDto } from './dto/signup-dto';\r\nimport { Body, Controller, HttpCode, Post, Req } from '@nestjs/common';\r\nimport { Request } from 'express';\r\nimport { AuthService } from './auth.service';\r\nimport { PhoneDto } from './dto/login-with-otp.dto';\r\nimport { VerifyOtpDto } from './dto/verify-otp.dto';\r\nimport { Public } from '@/common/decorators/public.decorator';\r\nimport { LoginDto } from './dto/login-with-password.dto';\r\nimport { ResetPasswordDto } from './dto/reset-password.dto';\r\nimport { ApiResponses } from '@/utils/response.util';\r\nimport { User } from '@/user/entity/user.entity';\r\nimport {\r\n  ApiBearerAuth,\r\n  ApiConflictResponse,\r\n  ApiCreatedResponse,\r\n  ApiNotAcceptableResponse,\r\n  ApiNotFoundResponse,\r\n  ApiOkResponse,\r\n  ApiTags,\r\n} from '@nestjs/swagger';\r\n\r\nimport { TokenService } from './token/token.service';\r\n\r\n@ApiTags('Auth')\r\n@ApiBearerAuth()\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(\r\n    private readonly authService: AuthService,\r\n    private readonly tokenService: TokenService,\r\n  ) {}\r\n\r\n  @ApiOkResponse({\r\n    description: 'با موفقیت ارسال شد',\r\n    example: { result: 'number', statusCode: 200 },\r\n  })\r\n  @Public()\r\n  @Post('otp')\r\n  @HttpCode(200)\r\n  async loginWithOTP(@Body() phoneDTO: PhoneDto): Promise<ApiResponses<User>> {\r\n    return this.authService.loginWithOTP(phoneDTO);\r\n  }\r\n\r\n  @ApiCreatedResponse({ description: 'با موفقیت ساخته شد' })\r\n  @ApiNotAcceptableResponse({ description: 'رمز یکبار مصرف اشتباه است' })\r\n  @Public()\r\n  @Post('verify/otp')\r\n  async verifyOtp(@Body() phoneDTO: VerifyOtpDto, @Req() req: Request) {\r\n    return this.authService.verifyWithOTP(phoneDTO, req);\r\n  }\r\n\r\n  @ApiOkResponse({ description: 'ok' })\r\n  @ApiNotFoundResponse({ description: 'کاربر یافت نشد' })\r\n  @ApiNotAcceptableResponse({ description: 'رمز عبور اشتباه است' })\r\n  @Public()\r\n  @Post('login/password')\r\n  @HttpCode(200)\r\n  async loginUserWithPassword(\r\n    @Body() phoneDTO: LoginDto,\r\n    @Req() req: Request,\r\n  ): Promise<ApiResponses<{ token: string; username: string }>> {\r\n    return this.authService.loginUserWithPassword(phoneDTO, req);\r\n  }\r\n\r\n  @Public()\r\n  @Post('forgot-password/otp')\r\n  async forgetPasswordWithOTP(@Body() phoneDto: PhoneDto) {\r\n    const { phone } = phoneDto;\r\n    return this.authService.forgetPasswordWithOTP(phone);\r\n  }\r\n\r\n  @Public()\r\n  @Post('reset-password/otp')\r\n  async resetPasswordWithOTP(\r\n    @Body() resetPasswordDto: ResetPasswordDto,\r\n  ): Promise<ApiResponses<{ login: boolean }>> {\r\n    return this.authService.resetPasswordWithOTP(resetPasswordDto);\r\n  }\r\n\r\n  @ApiCreatedResponse({ description: 'ثبت نام با موفقیت انجام شد' })\r\n  @ApiConflictResponse({ description: 'کاربر از قبل وجود دارد' })\r\n  @Public()\r\n  @Post('signup')\r\n  async signUp(@Req() req: Request, @Body() signupDto: SignupDto) {\r\n    return this.authService.signUpUsers(signupDto, req['userAgent'], req);\r\n  }\r\n\r\n  @Public()\r\n  @Post('check-phone')\r\n  @HttpCode(200)\r\n  async checkUser(\r\n    @Body() phoneDto: PhoneDto,\r\n  ): Promise<ApiResponses<{ registered: boolean; login: boolean }>> {\r\n    return this.authService.checkUser(phoneDto);\r\n  }\r\n\r\n  @Post('logout')\r\n  async logout(@Req() req: any) {\r\n    const token = req.headers.authorization.split(' ')[1];\r\n    await this.tokenService.deleteToken(token);\r\n  }\r\n}\r\n"],"names":["AuthController","loginWithOTP","phoneDTO","authService","verifyOtp","req","verifyWithOTP","loginUserWithPassword","forgetPasswordWithOTP","phoneDto","phone","resetPasswordWithOTP","resetPasswordDto","signUp","signupDto","signUpUsers","checkUser","logout","token","headers","authorization","split","tokenService","deleteToken","constructor","description","example","result","statusCode"],"mappings":";;;;+BA0BaA;;;eAAAA;;;2BA1Ba;wBAC4B;yBAC9B;6BACI;iCACH;8BACI;iCACN;sCACE;kCACQ;yBAW1B;8BAEsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKtB,IAAA,AAAMA,iBAAN,MAAMA;IAaLC,aAAa,AAAQC,QAAkB;;eAP7C,oBAAA;YAQE,OAAO,MAAKC,WAAW,CAACF,YAAY,CAACC;QACvC;;IAMME,UAAU,AAAQF,QAAsB,EAAE,AAAOG,GAAY;;eAJnE,oBAAA;YAKE,OAAO,MAAKF,WAAW,CAACG,aAAa,CAACJ,UAAUG;QAClD;;IAQME,sBACJ,AAAQL,QAAkB,EAC1B,AAAOG,GAAY;;eARrB,oBAAA;YAUE,OAAO,MAAKF,WAAW,CAACI,qBAAqB,CAACL,UAAUG;QAC1D;;IAIMG,sBAAsB,AAAQC,QAAkB;;eAFtD,oBAAA;YAGE,MAAM,EAAEC,KAAK,EAAE,GAAGD;YAClB,OAAO,MAAKN,WAAW,CAACK,qBAAqB,CAACE;QAChD;;IAIMC,qBACJ,AAAQC,gBAAkC;;eAH5C,oBAAA;YAKE,OAAO,MAAKT,WAAW,CAACQ,oBAAoB,CAACC;QAC/C;;IAMMC,OAAO,AAAOR,GAAY,EAAE,AAAQS,SAAoB;;eAJ9D,oBAAA;YAKE,OAAO,MAAKX,WAAW,CAACY,WAAW,CAACD,WAAWT,GAAG,CAAC,YAAY,EAAEA;QACnE;;IAKMW,UACJ,AAAQP,QAAkB;;eAJ5B,oBAAA;YAME,OAAO,MAAKN,WAAW,CAACa,SAAS,CAACP;QACpC;;IAGMQ,OAAO,AAAOZ,GAAQ;;eAD5B,oBAAA;YAEE,MAAMa,QAAQb,IAAIc,OAAO,CAACC,aAAa,CAACC,KAAK,CAAC,IAAI,CAAC,EAAE;YACrD,MAAM,MAAKC,YAAY,CAACC,WAAW,CAACL;QACtC;;IAzEAM,YACE,AAAiBrB,WAAwB,EACzC,AAAiBmB,YAA0B,CAC3C;aAFiBnB,cAAAA;aACAmB,eAAAA;IAChB;AAuEL;;;QApEIG,aAAa;QACbC,SAAS;YAAEC,QAAQ;YAAUC,YAAY;QAAI;;;;;;;;;;;;;;QASzBH,aAAa;;;QACPA,aAAa;;;;;;;;;;;;;;;QAOxBA,aAAa;;;QACPA,aAAa;;;QACRA,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA0BnBA,aAAa;;;QACZA,aAAa"}