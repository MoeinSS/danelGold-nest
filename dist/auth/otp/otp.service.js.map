{"version":3,"sources":["../../../src/auth/otp/otp.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  UnauthorizedException,\r\n  InternalServerErrorException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport * as bcrypt from 'bcryptjs';\r\nimport { generateNumericOTP } from '@/common/utils/otp.utils';\r\nimport { sendOTPSMS } from '@/common/utils/auth.utils';\r\nimport { OTP } from './entity/otp.entity';\r\n\r\nconst OTP_EXPIRATION_TIME_MS = 60 * 1000; // 60 seconds\r\n\r\n@Injectable()\r\nexport class OtpService {\r\n  constructor(\r\n    @InjectRepository(OTP)\r\n    private readonly otpRepository: Repository<OTP>,\r\n  ) {}\r\n\r\n  async sendOTP(phone: string): Promise<string> {\r\n    let otp: string;\r\n\r\n    const existingOTP = await this.otpRepository.findOne({\r\n      where: { phone },\r\n    });\r\n\r\n    otp = generateNumericOTP(5).toString();\r\n    console.log(`Generated OTP: ${otp}`);\r\n    await sendOTPSMS(phone, otp);\r\n\r\n    if (existingOTP) {\r\n      existingOTP.otp = await bcrypt.hash(otp, 10);\r\n      existingOTP.isVerified = false;\r\n      existingOTP.createdAt = new Date();\r\n      existingOTP.expirationTime = new Date(\r\n        Date.now() + OTP_EXPIRATION_TIME_MS,\r\n      );\r\n\r\n      await this.otpRepository.save(existingOTP);\r\n    } else {\r\n      const hashedOTP = await bcrypt.hash(otp, 10);\r\n      const expirationTime = new Date(Date.now() + OTP_EXPIRATION_TIME_MS);\r\n      const newOTP = this.otpRepository.create({\r\n        phone,\r\n        otp: hashedOTP,\r\n        expirationTime,\r\n        createdAt: new Date(),\r\n      });\r\n\r\n      await this.otpRepository.save(newOTP);\r\n    }\r\n\r\n    return otp;\r\n  }\r\n\r\n  async verifyOTP(phone: string, otp: string): Promise<boolean> {\r\n    const otpRecord = await this.otpRepository.findOne({ where: { phone } });\r\n\r\n    if (!otpRecord) {\r\n      console.log('No OTP record found for the phone.');\r\n      return false;\r\n    }\r\n\r\n    const currentTime = Date.now();\r\n    const otpTimestamp = otpRecord.createdAt.getTime();\r\n    const otpExpirationTime = OTP_EXPIRATION_TIME_MS;\r\n\r\n    if (currentTime - otpTimestamp > otpExpirationTime) {\r\n      console.log('OTP has expired.');\r\n      throw new BadRequestException('زمان رمز یکبار مصرف منقضی شده است');\r\n    }\r\n\r\n    const isValidOTP = await bcrypt.compare(otp, otpRecord.otp);\r\n    console.log(`isValidOTP VERIFY: ${isValidOTP}`);\r\n    if (isValidOTP) {\r\n      await this.otpRepository\r\n        .createQueryBuilder()\r\n        .update(OTP)\r\n        .set({ isVerified: true })\r\n        .where('phone = :phone', { phone })\r\n        .execute();\r\n    }\r\n\r\n    return isValidOTP;\r\n  }\r\n}\r\n"],"names":["OtpService","OTP_EXPIRATION_TIME_MS","sendOTP","phone","otp","existingOTP","otpRepository","findOne","where","generateNumericOTP","toString","console","log","sendOTPSMS","bcrypt","hash","isVerified","createdAt","Date","expirationTime","now","save","hashedOTP","newOTP","create","verifyOTP","otpRecord","currentTime","otpTimestamp","getTime","otpExpirationTime","BadRequestException","isValidOTP","compare","createQueryBuilder","update","OTP","set","execute","constructor"],"mappings":";;;;+BAgBaA;;;eAAAA;;;wBAXN;yBAC0B;0BACN;kEACH;0BACW;2BACR;2BACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEpB,MAAMC,yBAAyB,KAAK,MAAM,aAAa;AAGhD,IAAA,AAAMD,aAAN,MAAMA;IAMLE,QAAQC,KAAa;;eAA3B,oBAAA;YACE,IAAIC;YAEJ,MAAMC,cAAc,MAAM,MAAKC,aAAa,CAACC,OAAO,CAAC;gBACnDC,OAAO;oBAAEL;gBAAM;YACjB;YAEAC,MAAMK,IAAAA,4BAAkB,EAAC,GAAGC,QAAQ;YACpCC,QAAQC,GAAG,CAAC,CAAC,eAAe,EAAER,IAAI,CAAC;YACnC,MAAMS,IAAAA,qBAAU,EAACV,OAAOC;YAExB,IAAIC,aAAa;gBACfA,YAAYD,GAAG,GAAG,MAAMU,UAAOC,IAAI,CAACX,KAAK;gBACzCC,YAAYW,UAAU,GAAG;gBACzBX,YAAYY,SAAS,GAAG,IAAIC;gBAC5Bb,YAAYc,cAAc,GAAG,IAAID,KAC/BA,KAAKE,GAAG,KAAKnB;gBAGf,MAAM,MAAKK,aAAa,CAACe,IAAI,CAAChB;YAChC,OAAO;gBACL,MAAMiB,YAAY,MAAMR,UAAOC,IAAI,CAACX,KAAK;gBACzC,MAAMe,iBAAiB,IAAID,KAAKA,KAAKE,GAAG,KAAKnB;gBAC7C,MAAMsB,SAAS,MAAKjB,aAAa,CAACkB,MAAM,CAAC;oBACvCrB;oBACAC,KAAKkB;oBACLH;oBACAF,WAAW,IAAIC;gBACjB;gBAEA,MAAM,MAAKZ,aAAa,CAACe,IAAI,CAACE;YAChC;YAEA,OAAOnB;QACT;;IAEMqB,UAAUtB,KAAa,EAAEC,GAAW;;eAA1C,oBAAA;YACE,MAAMsB,YAAY,MAAM,MAAKpB,aAAa,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEL;gBAAM;YAAE;YAEtE,IAAI,CAACuB,WAAW;gBACdf,QAAQC,GAAG,CAAC;gBACZ,OAAO;YACT;YAEA,MAAMe,cAAcT,KAAKE,GAAG;YAC5B,MAAMQ,eAAeF,UAAUT,SAAS,CAACY,OAAO;YAChD,MAAMC,oBAAoB7B;YAE1B,IAAI0B,cAAcC,eAAeE,mBAAmB;gBAClDnB,QAAQC,GAAG,CAAC;gBACZ,MAAM,IAAImB,2BAAmB,CAAC;YAChC;YAEA,MAAMC,aAAa,MAAMlB,UAAOmB,OAAO,CAAC7B,KAAKsB,UAAUtB,GAAG;YAC1DO,QAAQC,GAAG,CAAC,CAAC,mBAAmB,EAAEoB,WAAW,CAAC;YAC9C,IAAIA,YAAY;gBACd,MAAM,MAAK1B,aAAa,CACrB4B,kBAAkB,GAClBC,MAAM,CAACC,cAAG,EACVC,GAAG,CAAC;oBAAErB,YAAY;gBAAK,GACvBR,KAAK,CAAC,kBAAkB;oBAAEL;gBAAM,GAChCmC,OAAO;YACZ;YAEA,OAAON;QACT;;IAtEAO,YACE,AACiBjC,aAA8B,CAC/C;aADiBA,gBAAAA;IAChB;AAoEL"}