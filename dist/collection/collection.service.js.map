{"version":3,"sources":["../../src/collection/collection.service.ts"],"sourcesContent":["import { BadRequestException, ForbiddenException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CollectionEntity } from '@/collection/entity/collection.entity';\r\nimport { CreateCollectionDto } from '@/collection/dto/CreateCollection.dto';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { User, UserRole } from '@/user/entity/user.entity';\r\nimport { UpdateCollectionDto } from '@/collection/dto/UpdateCollection.dto';\r\nimport { PaginationResult, PaginationService } from '@/common/paginate/pagitnate.service';\r\nimport { NFT } from '@/nft/entity/nft.entity';\r\n\r\n@Injectable()\r\nexport class CollectionsService {\r\n  constructor(\r\n    @InjectRepository(CollectionEntity)\r\n    private collectionsRepository: Repository<CollectionEntity>,\r\n    @InjectRepository(User)\r\n    private userRepository: Repository<User>,\r\n    @InjectRepository(NFT)\r\n    private nftsRepository: Repository<NFT>,\r\n\r\n    private readonly paginationService: PaginationService\r\n  ) {}\r\n\r\n  async createCollection(\r\n    createCollectionDto: CreateCollectionDto,\r\n    creatorPhone: string\r\n  ): Promise<ApiResponses<CollectionEntity>> {\r\n\r\n    const { name, description } = createCollectionDto\r\n\r\n    const creator = await this.userRepository.findOne({\r\n      where:{ phone:creatorPhone}\r\n    })\r\n\r\n    if(!creator){\r\n      throw new NotFoundException('کاربر یافت نشد')\r\n    }\r\n    \r\n    const collection = {\r\n      name,\r\n      description,\r\n      creator,\r\n      createdAt: new Date()\r\n    }\r\n\r\n    const newCollection = await this.collectionsRepository.save(collection)\r\n\r\n    return createResponse(201,newCollection)\r\n  }\r\n\r\n  async updateCollection(\r\n    collectionId: number,\r\n    updateCollectionDto: UpdateCollectionDto,\r\n    currentOwnerPhone: string,\r\n    currentUserRoles: string[]\r\n  ):Promise<ApiResponses<CollectionEntity>>{\r\n\r\n    const collection = await this.collectionsRepository.findOne({\r\n      where:{ id: collectionId },\r\n      relations:['nfts']\r\n    })\r\n\r\n    if(!collection){\r\n      throw new NotFoundException('مجموعه یافت نشد')\r\n    }\r\n\r\n    const isOwner = collection.creatorPhone === currentOwnerPhone;\r\n    const isAdmin = currentUserRoles.includes(UserRole.ADMIN);\r\n\r\n    if (!isOwner && !isAdmin) {\r\n      throw new BadRequestException('شما مجاز به ویرایش نیستید'); \r\n    }\r\n\r\n    if (updateCollectionDto.name !== undefined){\r\n      collection.name = updateCollectionDto.name\r\n    }\r\n\r\n    if (updateCollectionDto.description !== undefined){\r\n      collection.description = updateCollectionDto.description\r\n    }\r\n\r\n    collection.updatedAt = new Date();\r\n\r\n    const updatedCollection = await this.collectionsRepository.save(collection)\r\n\r\n    return createResponse(200,updatedCollection)\r\n  }\r\n\r\n  async getAllCollections(\r\n    query: any\r\n  ): Promise<ApiResponses<PaginationResult<any>>> {\r\n\r\n    const {\r\n      page = 1,\r\n      limit = 10,\r\n      search,\r\n      sort = 'id',\r\n      sortOrder = 'DESC',\r\n    } = query;\r\n\r\n    const queryBuilder = this.collectionsRepository\r\n      .createQueryBuilder('collections')\r\n      .leftJoinAndSelect('collections.users','user')\r\n      .select([\r\n        'collections.id',\r\n        'collections.name',\r\n        'collections.description',\r\n        'collections.createdAt',\r\n        'collections.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'user.firstName',\r\n        'user.lastName'\r\n      ])\r\n      .orderBy(`collections.${sort}`, sortOrder)\r\n      .skip((page - 1) * limit)\r\n      .take(limit);\r\n\r\n      const paginationResult = await this.paginationService.paginate(\r\n        queryBuilder,\r\n        page,\r\n        limit,\r\n      );\r\n\r\n      if(search){\r\n        queryBuilder.andWhere('(collections.name ILIKE :search)', \r\n          {search: `%${search}%`} \r\n        )\r\n      }\r\n\r\n      return createResponse(200,paginationResult);\r\n  }\r\n\r\n  async getAuctionById(\r\n    collectionId: number\r\n  ): Promise<ApiResponses<any>> {\r\n    \r\n    const collection = await this.collectionsRepository.findOne({\r\n       where: { id:collectionId }, \r\n       relations: ['nfts'] \r\n      });\r\n\r\n    if(!collection){\r\n      throw new NotFoundException('مزایده یافت نشد')\r\n    }\r\n    \r\n    const existingCollection = await this.collectionsRepository\r\n      .createQueryBuilder('collections')\r\n      .leftJoinAndSelect('collections.nfts','nft')\r\n      .leftJoinAndSelect('collections.user','collectionUser')\r\n      .leftJoinAndSelect('nfts.users','nftUser')\r\n      .select([\r\n        'collections.id',\r\n        'collections.name',\r\n        'collections.description',\r\n        'collections.creatorPhone',\r\n        'collections.createdAt',\r\n        'collections.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'nft.id',\r\n        'nft.name',\r\n        'nft.description',\r\n        'nft.imageURL',\r\n        'nft.matadataUrl',\r\n        'nft.ownerPhone',\r\n        'nft.creatorPhone',\r\n        'nft.price',\r\n        'nft.createdAt',\r\n        'nft.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'collectionUser.firstName',\r\n        'collectionUser.lastName'\r\n      ])\r\n      .addSelect([\r\n        'nftUser.firstName',\r\n        'nftUser.lastName'\r\n      ])\r\n      .where('collections.id = :collectionId', { collectionId })\r\n\r\n      return createResponse(200,existingCollection)\r\n  }\r\n\r\n  async addNftToCollection(\r\n    nftId: number,\r\n    collectionId: number,\r\n    currentOwnerPhone: string,\r\n  ): Promise<{ message: string }> {\r\n\r\n    const nft = await this.nftsRepository.findOne({\r\n      where: { id: nftId },\r\n      relations: ['owner'],\r\n    });\r\n  \r\n    const collection = await this.collectionsRepository.findOne({\r\n      where: { id: collectionId },\r\n    });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT پیدا نشد');\r\n    }\r\n    if (!collection) {\r\n      throw new NotFoundException('مجموعه پیدا نشد');\r\n    }\r\n  \r\n    const isOwner = nft.ownerPhone === currentOwnerPhone;\r\n    if (!isOwner) {\r\n      throw new ForbiddenException('فقط مالک می‌تواند این NFT را به مجموعه اضافه کند');\r\n    }\r\n  \r\n    nft.collectionEntity = collection;\r\n    await this.nftsRepository.save(nft);\r\n  \r\n    return { message: 'NFT با موفقیت به مجموعه اضافه شد' };\r\n  }\r\n\r\n  async removeNftFromCollection(\r\n    nftId: number,\r\n    currentOwnerPhone: string,\r\n  ): Promise<{ message: string }> {\r\n\r\n    const nft = await this.nftsRepository.findOne({\r\n      where: { id: nftId },\r\n      relations: ['owner', 'collection'],\r\n    });\r\n  \r\n    if (!nft) {\r\n      throw new NotFoundException('NFT پیدا نشد');\r\n    }\r\n  \r\n    const isOwner = nft.ownerPhone === currentOwnerPhone;\r\n    if (!isOwner) {\r\n      throw new ForbiddenException('فقط مالک می‌تواند این NFT را از مجموعه حذف کند');\r\n    }\r\n  \r\n    if (!nft.collectionEntity) {\r\n      throw new BadRequestException('NFT در هیچ مجموعه‌ای نیست');\r\n    }\r\n  \r\n    nft.collectionEntity = null;\r\n    await this.nftsRepository.save(nft);\r\n  \r\n    return { message: 'NFT با موفقیت از مجموعه حذف شد' };\r\n  }\r\n  \r\n  \r\n}\r\n"],"names":["CollectionsService","createCollection","createCollectionDto","creatorPhone","name","description","creator","userRepository","findOne","where","phone","NotFoundException","collection","createdAt","Date","newCollection","collectionsRepository","save","createResponse","updateCollection","collectionId","updateCollectionDto","currentOwnerPhone","currentUserRoles","id","relations","isOwner","isAdmin","includes","UserRole","ADMIN","BadRequestException","undefined","updatedAt","updatedCollection","getAllCollections","query","page","limit","search","sort","sortOrder","queryBuilder","createQueryBuilder","leftJoinAndSelect","select","addSelect","orderBy","skip","take","paginationResult","paginationService","paginate","andWhere","getAuctionById","existingCollection","addNftToCollection","nftId","nft","nftsRepository","ownerPhone","ForbiddenException","collectionEntity","message","removeNftFromCollection","constructor"],"mappings":"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"}