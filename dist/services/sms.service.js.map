{"version":3,"sources":["../../src/services/sms.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport axios from 'axios';\r\nimport * as Kavenegar from 'kavenegar';\r\nimport * as dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\ninterface CustomVerifyLookupOptions {\r\n  receptor: string;\r\n  token: string;\r\n  token2?: string;\r\n  token3?: string;\r\n  token20: string;\r\n  template: string;\r\n}\r\n\r\n@Injectable()\r\nexport class SmsService {\r\n  private readonly logger = new Logger(SmsService.name);\r\n\r\n  async sendSMS(phones: string | string[], smsText: string): Promise<void> {\r\n    const sender = '10004400064000';\r\n    const phoneNumbers = Array.isArray(phones) ? phones : [phones];\r\n    const batchSize = 200;\r\n    const totalNumbers = phoneNumbers.length;\r\n    let currentIndex = 0;\r\n\r\n    while (currentIndex < totalNumbers) {\r\n      const batchNumbers = phoneNumbers.slice(\r\n        currentIndex,\r\n        currentIndex + batchSize,\r\n      );\r\n      const receptor = batchNumbers.join(',');\r\n      // const kavenegarUrl = `https://api.kavenegar.com/v1/${process.env.KAVENEGAR_API_KEY}/sms/send.json?receptor=${receptor}&sender=${sender}&message=${smsText}`;\r\n\r\n      // const response = await axios.get(kavenegarUrl);\r\n      this.logger.log(`SMS >>> ${receptor}`);\r\n\r\n      currentIndex += batchSize;\r\n    }\r\n  }\r\n\r\n  async sendSignUpSMS(\r\n    phones: string | string[],\r\n    username: string,\r\n    pass: string,\r\n  ): Promise<void> {\r\n    const phoneNumbers = Array.isArray(phones) ? phones : [phones];\r\n    const batchSize = 200;\r\n    const totalNumbers = phoneNumbers.length;\r\n    const OtpApi = Kavenegar.KavenegarApi({\r\n      apikey: process.env.KAVENEGAR_API_KEY as string,\r\n    });\r\n\r\n    let currentIndex = 0;\r\n    while (currentIndex < totalNumbers) {\r\n      const batchNumbers = phoneNumbers.slice(\r\n        currentIndex,\r\n        currentIndex + batchSize,\r\n      );\r\n\r\n      await Promise.all(\r\n        batchNumbers.map((phone) => {\r\n          return new Promise((resolve, reject) => {\r\n            OtpApi.VerifyLookup(\r\n              {\r\n                receptor: phone,\r\n                token: username,\r\n                token2: pass,\r\n                template: 'sendSignup',\r\n              },\r\n              (response, status) => {\r\n                if (status === 200) {\r\n                  this.logger.log(\r\n                    `Message sent to ${phone} with status: ${status}`,\r\n                  );\r\n                  resolve(response);\r\n                } else {\r\n                  this.logger.error(\r\n                    `Failed to send message to ${phone} with status: ${status}`,\r\n                  );\r\n                  reject(new Error(`Failed with status: ${status}`));\r\n                }\r\n              },\r\n            );\r\n          });\r\n        }),\r\n      );\r\n      currentIndex += batchSize;\r\n    }\r\n  }\r\n\r\n  async sendClassTimeSMS(\r\n    phones: string | string[],\r\n    smsText: string,\r\n  ): Promise<void> {\r\n    const phoneNumbers = Array.isArray(phones) ? phones : [phones];\r\n    const batchSize = 200;\r\n    const totalNumbers = phoneNumbers.length;\r\n    const OtpApi = Kavenegar.KavenegarApi({\r\n      apikey: process.env.KAVENEGAR_API_KEY as string,\r\n    });\r\n\r\n    let currentIndex = 0;\r\n    while (currentIndex < totalNumbers) {\r\n      const batchNumbers = phoneNumbers.slice(\r\n        currentIndex,\r\n        currentIndex + batchSize,\r\n      );\r\n\r\n      await Promise.all(\r\n        batchNumbers.map((phone) => {\r\n          return new Promise((resolve, reject) => {\r\n            const options: CustomVerifyLookupOptions = {\r\n              receptor: phone,\r\n              token: '.',\r\n              token20: smsText,\r\n              template: 'classTime',\r\n            };\r\n            OtpApi.VerifyLookup(options, (response, status) => {\r\n              if (status === 200) {\r\n                this.logger.log(\r\n                  `Message sent to ${phone} with status: ${status}`,\r\n                );\r\n                resolve(response);\r\n              } else {\r\n                this.logger.error(\r\n                  `Failed to send message to ${phone} with status: ${status}`,\r\n                );\r\n                reject(new Error(`Failed with status: ${status}`));\r\n              }\r\n            });\r\n          });\r\n        }),\r\n      );\r\n\r\n      currentIndex += batchSize;\r\n    }\r\n  }\r\n}\r\n"],"names":["SmsService","dotenv","config","sendSMS","phones","smsText","sender","phoneNumbers","Array","isArray","batchSize","totalNumbers","length","currentIndex","batchNumbers","slice","receptor","join","logger","log","sendSignUpSMS","username","pass","OtpApi","Kavenegar","KavenegarApi","apikey","process","env","KAVENEGAR_API_KEY","Promise","all","map","phone","resolve","reject","VerifyLookup","token","token2","template","response","status","error","Error","sendClassTimeSMS","options","token20","Logger","name"],"mappings":"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"}