{"version":3,"sources":["../../src/services/IPFS.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n@Injectable()\r\nexport class IPFSService {\r\n  private readonly pinataEndpoint = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\r\n  private readonly pinataMetadataEndpoint = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\r\n  \r\n  // Using JWT for authentication\r\n  private readonly pinataJWT = process.env.PINATA_JWT; \r\n\r\n  private getHeaders(form: FormData) {\r\n    return {\r\n      headers: {\r\n        Authorization: `Bearer ${this.pinataJWT}`, // Using JWT token for authorization\r\n        ...form.getHeaders(),\r\n      },\r\n    };\r\n  }\r\n\r\n  // Upload file to IPFS\r\n  async uploadFileToIPFS(file: Express.Multer.File): Promise<string> {\r\n    const form = new FormData();\r\n    form.append('file', file.buffer, file.originalname);\r\n\r\n    try {\r\n      const response = await axios.post(this.pinataEndpoint, form, this.getHeaders(form));\r\n      return `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;\r\n    } catch (error) {\r\n      console.error('Error uploading file to IPFS:', error);\r\n      throw new Error('IPFS file upload failed');\r\n    }\r\n  }\r\n\r\n  // Upload metadata to IPFS\r\n  async uploadMetadataToIPFS(metadata: any): Promise<string> {\r\n    const form = new FormData();\r\n    form.append('metadata', JSON.stringify(metadata));\r\n\r\n    try {\r\n      const response = await axios.post(this.pinataMetadataEndpoint, form, this.getHeaders(form));\r\n      return `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;\r\n    } catch (error) {\r\n      console.error('Error uploading metadata to IPFS:', error);\r\n      throw new Error('IPFS metadata upload failed');\r\n    }\r\n  }\r\n}\r\n"],"names":["IPFSService","getHeaders","form","headers","Authorization","pinataJWT","uploadFileToIPFS","file","FormData","append","buffer","originalname","response","axios","post","pinataEndpoint","data","IpfsHash","error","console","Error","uploadMetadataToIPFS","metadata","JSON","stringify","pinataMetadataEndpoint","process","env","PINATA_JWT"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALc;8DACT;iEACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGd,IAAA,AAAMA,cAAN,MAAMA;IAOHC,WAAWC,IAAc,EAAE;QACjC,OAAO;YACLC,SAAS;gBACPC,eAAe,CAAC,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC;eACtCH,KAAKD,UAAU;QAEtB;IACF;IAEA,sBAAsB;IAChBK,iBAAiBC,IAAyB;;eAAhD,oBAAA;YACE,MAAML,OAAO,IAAIM,iBAAQ;YACzBN,KAAKO,MAAM,CAAC,QAAQF,KAAKG,MAAM,EAAEH,KAAKI,YAAY;YAElD,IAAI;gBACF,MAAMC,WAAW,MAAMC,cAAK,CAACC,IAAI,CAAC,MAAKC,cAAc,EAAEb,MAAM,MAAKD,UAAU,CAACC;gBAC7E,OAAO,CAAC,kCAAkC,EAAEU,SAASI,IAAI,CAACC,QAAQ,CAAC,CAAC;YACtE,EAAE,OAAOC,OAAO;gBACdC,QAAQD,KAAK,CAAC,iCAAiCA;gBAC/C,MAAM,IAAIE,MAAM;YAClB;QACF;;IAEA,0BAA0B;IACpBC,qBAAqBC,QAAa;;eAAxC,oBAAA;YACE,MAAMpB,OAAO,IAAIM,iBAAQ;YACzBN,KAAKO,MAAM,CAAC,YAAYc,KAAKC,SAAS,CAACF;YAEvC,IAAI;gBACF,MAAMV,WAAW,MAAMC,cAAK,CAACC,IAAI,CAAC,MAAKW,sBAAsB,EAAEvB,MAAM,MAAKD,UAAU,CAACC;gBACrF,OAAO,CAAC,kCAAkC,EAAEU,SAASI,IAAI,CAACC,QAAQ,CAAC,CAAC;YACtE,EAAE,OAAOC,OAAO;gBACdC,QAAQD,KAAK,CAAC,qCAAqCA;gBACnD,MAAM,IAAIE,MAAM;YAClB;QACF;;;aAzCiBL,iBAAiB;aACjBU,yBAAyB;QAE1C,+BAA+B;aACdpB,YAAYqB,QAAQC,GAAG,CAACC,UAAU;;AAsCrD"}