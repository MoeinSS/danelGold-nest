{"version":3,"sources":["../../src/services/IPFS.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { create } from 'ipfs-http-client';\r\n\r\n@Injectable()\r\nexport class IPFSService {\r\n  private ipfs: Awaited<ReturnType<typeof create>>;\r\n\r\n  constructor() {\r\n    this.ipfs = create({\r\n      host: 'ipfs.infura.io',\r\n      port: 5001,\r\n      protocol: 'https',\r\n      headers: {\r\n        authorization: 'Basic ' + Buffer.from('<projectId>:<projectSecret>').toString('base64'),\r\n      },\r\n    });\r\n  }\r\n\r\n  async uploadToIPFS(content: Buffer | string): Promise<string> {\r\n    try {\r\n      const result = await this.ipfs.add(content);\r\n      return `https://ipfs.infura.io/ipfs/${result.path}`;\r\n    } catch (error) {\r\n      throw new Error(`Error uploading to IPFS: ${error}`);\r\n    }\r\n  }\r\n\r\n  async uploadMetadataToIPFS(metadata: Record<string, any>): Promise<string> {\r\n    const metadataBuffer = Buffer.from(JSON.stringify(metadata));\r\n    return this.uploadToIPFS(metadataBuffer);\r\n  }\r\n}\r\n"],"names":["IPFSService","uploadToIPFS","content","result","ipfs","add","path","error","Error","uploadMetadataToIPFS","metadata","metadataBuffer","Buffer","from","JSON","stringify","constructor","create","host","port","protocol","headers","authorization","toString"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJc;gCACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGhB,IAAA,AAAMA,cAAN,MAAMA;IAcLC,aAAaC,OAAwB;;eAA3C,oBAAA;YACE,IAAI;gBACF,MAAMC,SAAS,MAAM,MAAKC,IAAI,CAACC,GAAG,CAACH;gBACnC,OAAO,CAAC,4BAA4B,EAAEC,OAAOG,IAAI,CAAC,CAAC;YACrD,EAAE,OAAOC,OAAO;gBACd,MAAM,IAAIC,MAAM,CAAC,yBAAyB,EAAED,MAAM,CAAC;YACrD;QACF;;IAEME,qBAAqBC,QAA6B;;eAAxD,oBAAA;YACE,MAAMC,iBAAiBC,OAAOC,IAAI,CAACC,KAAKC,SAAS,CAACL;YAClD,OAAO,MAAKT,YAAY,CAACU;QAC3B;;IAvBAK,aAAc;QACZ,IAAI,CAACZ,IAAI,GAAGa,IAAAA,sBAAM,EAAC;YACjBC,MAAM;YACNC,MAAM;YACNC,UAAU;YACVC,SAAS;gBACPC,eAAe,WAAWV,OAAOC,IAAI,CAAC,+BAA+BU,QAAQ,CAAC;YAChF;QACF;IACF;AAeF"}