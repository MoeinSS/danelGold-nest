{"version":3,"sources":["../../src/auction/auction.service.ts"],"sourcesContent":["import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { createQueryBuilder, LessThan, Repository } from 'typeorm';\r\nimport { Auction, AuctionStatus } from '@/auction/entity/auction.entity';\r\nimport { CreateAuctionDto } from '@/auction/dto/CreateAuction.dto';\r\nimport { UpdateAuctionDto } from '@/auction/dto/UpdateAuction.dto';\r\nimport { ApiResponses, createResponse } from '@/utils/response.util';\r\nimport { PaginationResult, PaginationService } from '@/common/paginate/pagitnate.service';\r\nimport { CronJob } from 'cron';\r\nimport { ParticipateAuctionDto } from '@/auction/dto/ParticipateAuction.dto';\r\nimport { User } from '@/user/entity/user.entity';\r\nimport { Bid } from './entity/auctionBid.entity';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { SmsService } from '@/services/sms.service';\r\n\r\n@Injectable()\r\nexport class AuctionsService {\r\n  private job: CronJob;\r\n  constructor(\r\n    @InjectRepository(Auction)\r\n    private readonly auctionsRepository: Repository<Auction>,\r\n    @InjectRepository(Bid)\r\n    private readonly bidRepository: Repository<Bid>,\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n\r\n    private readonly paginationService: PaginationService,\r\n    private readonly smsService: SmsService\r\n  ) {}\r\n\r\n  async createAuction(\r\n    createAuctionDto:CreateAuctionDto\r\n  ): Promise<ApiResponses<Auction>> {\r\n\r\n    const {\r\n      title, \r\n      startTime, \r\n      endTime, \r\n      startingBid, \r\n      currentBid,\r\n      isSms\r\n     } = createAuctionDto;\r\n\r\n     if (endTime && startTime && endTime < startTime) {\r\n      throw new BadRequestException(\r\n        'تاریخ پایان مزایده نمی تواند زودتر از تاریخ شروع آن باشد',\r\n      );\r\n    }\r\n\r\n    const auction = {\r\n      title,\r\n      startTime,\r\n      endTime,\r\n      startingBid,\r\n      currentBid,\r\n      isSms: isSms,\r\n      auctionStatus: AuctionStatus.Active,\r\n      createdAt : new Date(),\r\n    }\r\n    const savedAuction = await this.auctionsRepository.save(auction);\r\n\r\n    return createResponse(201,savedAuction)\r\n  }\r\n\r\n  async updateAuction(\r\n    auctionId: number, \r\n    updateAuctionDto: UpdateAuctionDto\r\n  ): Promise<ApiResponses<Auction>> {\r\n\r\n    const {\r\n      title,\r\n      startTime,\r\n      endTime,\r\n      startingBid,\r\n      currentBid,\r\n      isSms,\r\n      auctionStatus\r\n    } = updateAuctionDto\r\n    \r\n    const existingAuction = await this.auctionsRepository.findOne({\r\n      where: { id:auctionId }\r\n    });\r\n\r\n    if (!existingAuction) {\r\n      throw new NotFoundException('مزایده مورد نظر پیدا نشد');\r\n    }\r\n\r\n    existingAuction.title = title ?? existingAuction.title\r\n    existingAuction.startTime = startTime ?? existingAuction.startTime\r\n    existingAuction.endTime = endTime ?? existingAuction.endTime\r\n    existingAuction.startingBid = startingBid ?? existingAuction.startingBid\r\n    existingAuction.currentBid = currentBid ?? existingAuction.currentBid\r\n    existingAuction.isSms = isSms ?? existingAuction.isSms\r\n    existingAuction.auctionStatus = auctionStatus ?? existingAuction.auctionStatus\r\n\r\n\r\n    const updatedAuction = await this.auctionsRepository.save(existingAuction)\r\n\r\n    return createResponse(200,updatedAuction)\r\n\r\n  }\r\n\r\n  async deleteAuction(\r\n    auctionId: number\r\n  ): Promise<{message: string}> {\r\n\r\n    const auction = await this.auctionsRepository.findOne({\r\n      where: {id: auctionId}\r\n    })\r\n\r\n    if(!auction){\r\n      throw new NotFoundException('مزایده یافت نشد')\r\n    }\r\n\r\n    if(auction.auctionStatus === AuctionStatus.Active) {\r\n      throw new BadRequestException('مزایده فعال قابل حذف نیست')\r\n    }\r\n\r\n    await this.auctionsRepository.remove(auction);\r\n\r\n    return{ message : 'مزایده با موفقیت حذف گردید'}\r\n  }\r\n\r\n  async getAllAuctions(\r\n    query: any\r\n  ): Promise<ApiResponses<PaginationResult<any>>> {\r\n\r\n    const {\r\n      page = 1,\r\n      limit = 10,\r\n      search,\r\n      sort = 'id',\r\n      sortOrder = 'DESC',\r\n    } = query;\r\n\r\n    const queryBuilder = this.auctionsRepository\r\n      .createQueryBuilder('auctions')\r\n      .select([\r\n        'auctions.id',\r\n        'auctions.title',\r\n        'auctions.startTime',\r\n        'auctions.endTime',\r\n        'auctions.startingBid',\r\n        'auctions.currentBid',\r\n        'auctions.auctionStatus',\r\n        'auctions.createdAt',\r\n        'auctions.updatedAt'\r\n      ])\r\n      .orderBy(`auctions.${sort}`, sortOrder)\r\n      .skip((page - 1) * limit)\r\n      .take(limit);\r\n\r\n      const paginationResult = await this.paginationService.paginate(\r\n        queryBuilder,\r\n        page,\r\n        limit,\r\n      );\r\n\r\n      if(search){\r\n        queryBuilder.andWhere('(auctions.title ILIKE :search)', \r\n          {search: `%${search}%`} \r\n        )\r\n      }\r\n\r\n      return createResponse(200,paginationResult);\r\n      \r\n  }\r\n\r\n  async getAuctionById(\r\n    auctionId: number\r\n  ): Promise<ApiResponses<any>> {\r\n    \r\n    const auction = await this.auctionsRepository.findOne({\r\n       where: { id:auctionId }, \r\n       relations: ['nfts'] \r\n      });\r\n\r\n    if(!auction){\r\n      throw new NotFoundException('مزایده یافت نشد')\r\n    }\r\n    \r\n    const existingAuction = await this.auctionsRepository\r\n      .createQueryBuilder('auctions')\r\n      .leftJoinAndSelect('auctions.nfts','nft')\r\n      .leftJoinAndSelect('nfts.users','user')\r\n      .select([\r\n        'auctions.id',\r\n        'auctions.title',\r\n        'auctions.startTime',\r\n        'auctions.endTime',\r\n        'auctions.startingBid',\r\n        'auctions.currentBid',\r\n        'auctions.auctionStatus',\r\n        'auctions.createdAt',\r\n        'auctions.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'nft.id',\r\n        'nft.name',\r\n        'nft.description',\r\n        'nft.imageUrl',\r\n        'nft.matadataUrl',\r\n        'nft.ownerPhone',\r\n        'nft.creatorPhone',\r\n        'nft.price',\r\n        'nft.createdAt',\r\n        'nft.updatedAt'\r\n      ])\r\n      .addSelect([\r\n        'user.firstName',\r\n        'user.lastName'\r\n      ])\r\n      .where('auctions.id = :auctionId', { auctionId })\r\n\r\n      return createResponse(200,existingAuction)\r\n  }\r\n\r\n  async participateAuction(\r\n    auctionId: number,\r\n    participateAuctionDto: ParticipateAuctionDto,\r\n    userPhone: string\r\n  ): Promise<{ message: string }> {\r\n    const { bidAmount } = participateAuctionDto;\r\n\r\n    const auction = await this.auctionsRepository.findOne({\r\n      where: { id: auctionId },\r\n      relations: ['bids'],\r\n    });\r\n\r\n    if (!auction) {\r\n      throw new NotFoundException('مزایده یافت نشد'); \r\n    }\r\n\r\n    if (auction.auctionStatus === AuctionStatus.Deactive) {\r\n      throw new BadRequestException('مزایده به پایان رسیده است'); \r\n    }\r\n\r\n    if (bidAmount <= (auction.currentBid || 0)) {\r\n      throw new BadRequestException('مقدار پیشنهاد باید بیشتر از پیشنهاد فعلی باشد'); \r\n    }\r\n\r\n    const user = await this.userRepository.findOne({ where: { phone: userPhone } });\r\n    if (!user) {\r\n      throw new NotFoundException('کاربر یافت نشد');\r\n    }\r\n\r\n    const newBid = this.bidRepository.create({\r\n      amount: bidAmount,\r\n      auction,\r\n      user,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    await this.bidRepository.save(newBid);\r\n\r\n    auction.currentBid = bidAmount;\r\n    auction.highestBidder = user; \r\n\r\n    await this.auctionsRepository.save(auction);\r\n\r\n    return { message: 'پیشنهاد با موفقیت ثبت شد' }; \r\n  }\r\n\r\n  async checkAuctionDate():Promise<any>{\r\n\r\n    const activeAuctions = await this.auctionsRepository.find({\r\n      where:{\r\n        endTime: LessThan(new Date()),\r\n        auctionStatus: AuctionStatus.Active\r\n      }\r\n    });\r\n\r\n    if(activeAuctions.length > 0) {\r\n      for (const activeAuction of activeAuctions) {\r\n        activeAuction.auctionStatus = AuctionStatus.Deactive\r\n      } \r\n      await this.auctionsRepository.save(activeAuctions)\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      message: 'active auctions dueDate checked and deactive'\r\n    }\r\n  }\r\n\r\n  onModuleInit() {\r\n    this.job = new CronJob('* * * * *', async () => {\r\n      await this.checkAuctionDate();\r\n      console.log('Cron job for deactivating auctions ran.');\r\n    });\r\n    this.job.start();\r\n  }\r\n  \r\n  onModuleDestroy() {\r\n    if (this.job) {\r\n      this.job.stop();\r\n    }\r\n  }\r\n\r\n}\r\n"],"names":["AuctionsService","createAuction","createAuctionDto","title","startTime","endTime","startingBid","currentBid","isSms","BadRequestException","auction","auctionStatus","AuctionStatus","Active","createdAt","Date","savedAuction","auctionsRepository","save","createResponse","updateAuction","auctionId","updateAuctionDto","existingAuction","findOne","where","id","NotFoundException","updatedAuction","deleteAuction","remove","message","getAllAuctions","query","page","limit","search","sort","sortOrder","queryBuilder","createQueryBuilder","select","orderBy","skip","take","paginationResult","paginationService","paginate","andWhere","getAuctionById","relations","leftJoinAndSelect","addSelect","participateAuction","participateAuctionDto","userPhone","bidAmount","Deactive","user","userRepository","phone","newBid","bidRepository","create","amount","highestBidder","checkAuctionDate","activeAuctions","find","LessThan","length","activeAuction","statusCode","onModuleInit","job","CronJob","console","log","start","onModuleDestroy","stop","constructor","smsService"],"mappings":"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"}